// src/server/ExpressServer.ts - –î–ê–®–ë–û–†–î
import express from 'express';
import cors from 'cors';
import TelegramBot from 'node-telegram-bot-api';
import { Database } from '../database';
import { config } from '../config';
import { logger } from '../utils/Logger';

export class ExpressServer {
  private app: express.Application;
  private server?: any;

  constructor(
    private bot: TelegramBot,
    private database: Database
  ) {
    this.app = express();
    this.setupMiddleware();
    this.setupRoutes();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.static('public'));
    
    this.app.use((req, res, next) => {
      req.setTimeout(25000);
      next();
    });
  }

  private setupRoutes(): void {
    // –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const authenticate = (req: express.Request, res: express.Response, next: express.NextFunction) => {
      const auth = req.headers.authorization;
      
      if (!auth) {
        res.setHeader('WWW-Authenticate', 'Basic realm="Admin Dashboard"');
        return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');
      const username = credentials[0];
      const password = credentials[1];

      if (username === 'admin' && password === (config.security?.adminPassword || 'admin123')) {
        next();
      } else {
        res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
    };

    // CSV escape —Ñ—É–Ω–∫—Ü–∏—è
    const escapeCSV = (str: any): string => {
      if (str === null || str === undefined) return '';
      return `"${String(str).replace(/"/g, '""')}"`;
    };

    // Redirect —Å –∫–æ—Ä–Ω—è
    this.app.get('/', (req, res) => res.redirect('/dashboard'));
    
    // Webhook –¥–ª—è Telegram
    this.app.post(`/bot${process.env.TELEGRAM_BOT_TOKEN}`, async (req, res) => {
      try {
        logger.info('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
        await this.bot.processUpdate(req.body);
        res.status(200).json({ ok: true });
        logger.success('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(200).json({ ok: false, error: 'Internal error' });
      }
    });

    // === –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –î–ê–®–ë–û–†–î ===
    this.app.get('/dashboard', authenticate, async (req, res) => {
      try {
        const stats = await this.database.getStats();
        const alerts = await this.database.getAlerts();
        const unhandledAlerts = alerts.filter((alert: any) => !alert.handled).length;
        
        const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</title>
    <style>
* { margin: 0; padding: 0; box-sizing: border-box; }
body { 
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: linear-gradient(135deg, #7636f2 0%,rgb(184, 70, 212) 30%, #7636f2 70%, #ffb9ff 100%);
    background-attachment: fixed;
    color: #1e3a8a;
    min-height: 100vh;
    line-height: 1.6;
}
.container {
    max-width: 1420px;
    margin: 0 auto;
    padding: 20px;
}
.header {
    text-align: center;
    color: white;
    margin-bottom: 40px;
    background: rgba(255, 255, 255, 0.1);
    padding: 30px;
    border-radius: 20px;
    backdrop-filter: blur(25px);
    box-shadow: 0 8px 32px rgba(31, 38, 135, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.3);
}
.header h1 {
    font-size: 2.5rem;
    margin-bottom: 10px;
    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}
.header p {
    font-size: 1.2rem;
    opacity: 0.9;
}
.main-content {
    display: grid;
    grid-template-columns: 450px 1fr;
    gap: 30px;
    margin-bottom: 40px;
}
.stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 20px;
}
.stat-card {
    background: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 20px;
    text-align: center;
    box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    backdrop-filter: blur(20px);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.6);
}
.stat-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 25px 50px rgba(0,0,0,0.2);
    background: rgba(255, 255, 255, 0.95);
}
.stat-card h3 {
    font-size: 1.5rem;
    color: #1e3a8a;
    margin-bottom: 12px;
    text-transform: uppercase;
    letter-spacing: 1px;
    font-weight: 600;
    text-shadow: none;
}
.big-number {
    font-size: 3rem;
    font-weight: bold;
    color: #1e3a8a;
    margin-bottom: 8px;
    text-shadow: none;
}
.stat-card p {
    color: #1e40af;
    font-size: 1.2rem;
    text-shadow: none;
}
.alert-badge {
    background: #e53e3e;
    color: white;
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.8rem;
    margin-left: 8px;
    animation: pulse 2s infinite;
}
@keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
}

/* ========= –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø –ö–ù–û–ü–û–ö ========= */
.actions-card {
    background: rgba(255, 255, 255, 0.9);
    padding: 30px;
    border-radius: 20px;
    margin-bottom: 20px;
    box-shadow: 0 15px 35px rgba(0,0,0,0.15);
    backdrop-filter: blur(20px);
    border: 1px solid rgba(255, 255, 255, 0.6);
}
.actions-card h3 {
    color: #1e3a8a;
    margin-bottom: 20px;
    font-size: 1.3rem;
    text-shadow: none;
}
.actions-card p {
    color: #1e40af;
    text-shadow: none;
    margin-bottom: 20px;
}

/* –û–°–ù–û–í–ù–´–ï –°–¢–ò–õ–ò –ö–û–ù–¢–ï–ô–ù–ï–†–ê –ö–ù–û–ü–û–ö */
.actions-grid {
    background: linear-gradient(135deg, #7636f2 0%, #e578ff 100%) !important;
    border-radius: 16px;
    padding: 20px;
    box-shadow: 0 4px 15px rgba(118, 54, 242, 0.3);
    display: flex;
    flex-direction: column;
}

/* –°–¢–ò–õ–ò –ö–ù–û–ü–û–ö */
.action-btn {
    display: block;
    background: none;
    color: white;
    padding: 12px 16px;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 500;
    transition: all 0.3s ease;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.2);
    margin: 0;
    font-size: 0.95rem;
}
.action-btn:last-child {
    border-bottom: none;
}
.action-btn:hover {
    background: rgba(255, 255, 255, 0.15);
    text-decoration: none;
    color: white;
    padding-left: 24px;
    border-radius: 8px;
}
.action-btn:focus {
    outline: 2px solid rgba(255, 255, 255, 0.5);
    outline-offset: 2px;
}

.info-card {
    background: rgba(255, 255, 255, 0.95);
    padding: 25px;
    border-radius: 20px;
    margin-bottom: 20px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}
.info-card h3 {
    color: #1e3a8a;
    margin-bottom: 15px;
    font-size: 1.2rem;
    text-shadow: none;
}
.info-card p {
    color: #1e40af;
    text-shadow: none;
}
.feature-list {
    list-style: none;
    padding-left: 0;
}
.feature-list li {
    padding: 8px 0;
    border-bottom: 1px solid rgba(30, 58, 138, 0.2);
    color: #1e40af;
    text-shadow: none;
}
.feature-list li:before {
    content: "‚úÖ ";
    margin-right: 8px;
}
.footer {
    text-align: center;
    color: rgba(255, 255, 255, 0.8);
    margin-top: 40px;
    padding: 20px;
}

/* ========= –ú–ï–î–ò–ê-–ó–ê–ü–†–û–°–´ ========= */
@media (max-width: 1200px) {
    .main-content {
        grid-template-columns: 1fr;
        gap: 20px;
    }
    .stats-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
    }
}

@media (max-width: 768px) {
    .container { 
        padding: 10px; 
    }
    .header h1 { 
        font-size: 2rem; 
    }
    .big-number { 
        font-size: 2rem; 
    }
    .stats-grid {
        grid-template-columns: 1fr;
        gap: 12px;
    }
    .stat-card {
        padding: 15px;
    }
    .actions-card {
        padding: 20px;
    }
}

@media (max-width: 480px) {
    .big-number { 
        font-size: 1.8rem; 
    }
    .stat-card h3 { 
        font-size: 0.9rem; 
    }
    .stat-card { 
        padding: 12px; 
    }
    .header h1 {
        font-size: 1.8rem;
    }
    .actions-card {
        padding: 15px;
    }
    .actions-grid {
        padding: 15px;
    }
    .action-btn {
        padding: 10px 12px;
        font-size: 0.9rem;
    }
}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è</p>
        </div>

        <div class="main-content">
            <div class="actions-card">
                <h3>üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h3>
                <p>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏:</p>
                <div class="actions-grid">
                    <a href="/dashboard/export/responses" class="action-btn">üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤ (CSV)</a>
                    <a href="/dashboard/export/free-responses" class="action-btn">üí¨ –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (CSV)</a>
                    <a href="/dashboard/export/users" class="action-btn">üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                    <a href="/dashboard/export/alerts" class="action-btn">üö® –≠–∫—Å–ø–æ—Ä—Ç –∞–ª–µ—Ä—Ç–æ–≤ (CSV)</a>
                    <a href="/dashboard/alerts" class="action-btn">üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–ª–µ—Ä—Ç–æ–≤</a>
                    <a href="/dashboard" class="action-btn">üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-card">
                    <h3>üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                    <div class="big-number">${stats.totalUsers}</div>
                    <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å–∏—Å—Ç–µ–º–µ</p>
                </div>
                <div class="stat-card">
                    <h3>üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è</h3>
                    <div class="big-number">${stats.activeToday}</div>
                    <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª–æ —Å–µ–≥–æ–¥–Ω—è</p>
                </div>
                <div class="stat-card">
                    <h3>üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å</h3>
                    <div class="big-number">${stats.completedCourse}</div>
                    <p>–ü—Ä–æ—à–ª–∏ –≤—Å–µ 7 –¥–Ω–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã</p>
                </div>
                <div class="stat-card">
                    <h3>üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏${unhandledAlerts > 0 ? 
                    `<span class="alert-badge">${unhandledAlerts}</span>` : ''}</h3>
                    <div class="big-number">${alerts.length}</div>
                    <p>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
                </div>
            </div>
        </div>

        <div class="footer">
            <p>üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}</p>
            <p style="margin-top: 10px;">
                üí° <strong>–ù–æ–≤–æ–µ:</strong> –£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ —ç–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!
            </p>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª
            const numbers = document.querySelectorAll('.big-number');
            numbers.forEach(num => {
                const finalNumber = parseInt(num.textContent);
                let currentNumber = 0;
                const increment = finalNumber / 30;
                const timer = setInterval(() => {
                    currentNumber += increment;
                    if (currentNumber >= finalNumber) {
                        num.textContent = finalNumber;
                        clearInterval(timer);
                    } else {
                        num.textContent = Math.floor(currentNumber);
                    }
                }, 50);
            });
        });
    </script>
</body>
</html>`;
        res.send(html);
      } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
      }
    });

    // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
    this.app.get('/dashboard/alerts', authenticate, async (req, res) => {
      try {
        const alerts = await this.database.getAlerts();
        
        const alertRows = alerts.map((alert: any) => `
          <tr style="${!alert.handled ? 'background-color: #fff5f5;' : ''}">
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0;">${alert.id}</td>
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0;">${alert.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}</td>
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0;">${alert.telegram_id}</td>
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0; max-width: 300px; word-wrap: break-word;">${alert.message}</td>
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0;">
              <span style="padding: 4px 8px; border-radius: 12px; color: white; background: ${alert.handled ? '#48bb78' : '#e53e3e'};">
                ${alert.handled ? '–û–±—Ä–∞–±–æ—Ç–∞–Ω' : '–ù–æ–≤—ã–π'}
              </span>
            </td>
            <td style="padding: 12px; border-bottom: 1px solid #e2e8f0;">${new Date(alert.created_at).toLocaleString('ru-RU')}</td>
          </tr>
        `).join('');

        const html = `
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <title>üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; background: #f7fafc; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            .table-container { background: white; border-radius: 8px; overflow: hidden; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
            table { width: 100%; border-collapse: collapse; }
            th { background: #4a5568; color: white; padding: 12px; text-align: left; }
            .btn { display: inline-block; background: #4299e1; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px; margin-right: 10px; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h1>
              <p>–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${alerts.length} | –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: ${alerts.filter((a: any) => !a.handled).length}</p>
              <a href="/dashboard" class="btn">‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
              <a href="/dashboard/export/alerts" class="btn">üì• –≠–∫—Å–ø–æ—Ä—Ç CSV</a>
            </div>
            <div class="table-container">
              <table>
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>–ò–º—è</th>
                    <th>Telegram ID</th>
                    <th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>
                    <th>–°—Ç–∞—Ç—É—Å</th>
                    <th>–î–∞—Ç–∞</th>
                  </tr>
                </thead>
                <tbody>
                  ${alertRows}
                </tbody>
              </table>
            </div>
          </div>
        </body>
        </html>`;
        
        res.send(html);
      } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
      }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤ –≤ CSV
    this.app.get('/dashboard/export/responses', authenticate, async (req, res) => {
      try {
        logger.info('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤');
        
        const responses = await this.database.getAllResponses();
        
        let csv = '\ufeff'; // BOM –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        csv += 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–ò–º—è,Username,–î–µ–Ω—å,–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞,–û—Ç–≤–µ—Ç,–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n';
        
        responses.forEach((response: any) => {
          csv += [
            escapeCSV(response.user_id),
            escapeCSV(response.first_name || response.name),
            escapeCSV(response.username || response.telegram_id),
            escapeCSV(response.day),
            escapeCSV(response.question || response.question_type),
            escapeCSV(response.answer || response.response_text),
            escapeCSV(new Date(response.created_at).toLocaleString('ru-RU'))
          ].join(',') + '\n';
        });
        
        const filename = `responses_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        logger.success(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${responses.length} –æ—Ç–≤–µ—Ç–æ–≤`);
        res.send(csv);
        
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).send(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
      }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –∞–ª–µ—Ä—Ç–æ–≤ –≤ CSV
    this.app.get('/dashboard/export/alerts', authenticate, async (req, res) => {
      try {
        logger.info('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –∞–ª–µ—Ä—Ç–æ–≤');
        
        const alerts = await this.database.getAlerts();
        
        let csv = '\ufeff';
        csv += 'ID –∞–ª–µ—Ä—Ç–∞,ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–ò–º—è,Telegram ID,–¢—Ä–∏–≥–≥–µ—Ä,–°–æ–æ–±—â–µ–Ω–∏–µ,–û–±—Ä–∞–±–æ—Ç–∞–Ω,–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è\n';
        
        alerts.forEach((alert: any) => {
          csv += [
            escapeCSV(alert.id),
            escapeCSV(alert.user_id),
            escapeCSV(alert.first_name || alert.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            escapeCSV(alert.username || alert.telegram_id),
            escapeCSV(alert.trigger_word || 'general'),
            escapeCSV(alert.message),
            escapeCSV(alert.handled ? '–î–∞' : '–ù–µ—Ç'),
            escapeCSV(new Date(alert.created_at).toLocaleString('ru-RU'))
          ].join(',') + '\n';
        });
     
        const filename = `alerts_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        logger.success(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${alerts.length} –∞–ª–µ—Ä—Ç–æ–≤`);
        res.send(csv);
        
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–ª–µ—Ä—Ç–æ–≤:', error);
        res.status(500).send(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
      }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
    this.app.get('/dashboard/export/free-responses', authenticate, async (req, res) => {
      try {
        logger.info('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (–Ω–µ callback –∫–Ω–æ–ø–∫–∏)
        const freeResponses = await this.database.getFreeTextResponses();
        
        let csv = '\ufeff'; // BOM –¥–ª—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        csv += 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–ò–º—è,–î–µ–Ω—å –∫—É—Ä—Å–∞,–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏,–ö–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞),–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n';
        
        freeResponses.forEach((response: any) => {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç - –Ω–∞ –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–≤–µ—á–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
          let context = '';
          const day = response.day || response.current_day || 1;
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
          const responseHour = new Date(response.created_at).getHours();
          
          if (responseHour >= 9 && responseHour < 13) {
            context = `–î–µ–Ω—å ${day}: –û—Ç–≤–µ—Ç –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ`;
          } else if (responseHour >= 13 && responseHour < 16) {
            context = `–î–µ–Ω—å ${day}: –û—Ç–≤–µ—Ç –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è`;
          } else if (responseHour >= 16 && responseHour < 20) {
            context = `–î–µ–Ω—å ${day}: –û—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è`;
          } else if (responseHour >= 20 || responseHour < 9) {
            context = `–î–µ–Ω—å ${day}: –û—Ç–≤–µ—Ç –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Ä–µ—Ñ–ª–µ–∫—Å–∏—é`;
          } else {
            context = `–î–µ–Ω—å ${day}: –°–≤–æ–±–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
          }
          
          csv += [
            escapeCSV(response.user_id),
            escapeCSV(response.first_name || response.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            escapeCSV(day),
            escapeCSV(new Date(response.created_at).toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })),
            escapeCSV(context),
            escapeCSV(response.answer || response.response_text || response.message),
            escapeCSV(new Date(response.created_at).toLocaleString('ru-RU'))
          ].join(',') + '\n';
        });
        
        const filename = `free_responses_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        logger.success(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${freeResponses.length} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤`);
        res.send(csv);
        
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).send(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
      }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV
    this.app.get('/dashboard/export/users', authenticate, async (req, res) => {
      try {
        logger.info('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        
        const users = await this.database.getAllUsers();
        
        let csv = '\ufeff';
        csv += 'ID,–ò–º—è,Username,–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å,–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏,–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å,–ó–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å,–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤\n';
        
        for (const user of users) {
          const userResponses = await this.database.getUserResponses(user.telegram_id);
          const responseCount = userResponses.length;
          
          csv += [
            escapeCSV(user.id),
            escapeCSV(user.first_name || user.name),
            escapeCSV(user.username || user.telegram_id),
            escapeCSV(user.current_day),
            escapeCSV(new Date(user.created_at).toLocaleString('ru-RU')),
            escapeCSV(new Date(user.last_activity || user.updated_at).toLocaleString('ru-RU')),
            escapeCSV(user.current_day >= 7 ? '–î–∞' : '–ù–µ—Ç'),
            escapeCSV(responseCount)
          ].join(',') + '\n';
        }
        
        const filename = `users_${new Date().toISOString().split('T')[0]}.csv`;
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        
        logger.success(`‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
        res.send(csv);
        
      } catch (error) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).send(`–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${error}`);
      }
    });
  }

  async start(port: number): Promise<void> {
    return new Promise((resolve, reject) => {
      this.server = this.app.listen(port, () => {
        logger.success(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
        resolve();
      });

      this.server.on('error', reject);
    });
  }

  async stop(): Promise<void> {
    return new Promise((resolve) => {
      if (this.server) {
        this.server.close(() => {
          logger.success('‚úÖ Express —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          resolve();
        });
      } else {
        resolve();
      }
    });
  }
}