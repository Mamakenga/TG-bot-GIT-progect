// src/scheduling/ReminderScheduler.ts
import cron from 'node-cron';
import TelegramBot from 'node-telegram-bot-api';
import { Database } from '../database';
import { logger } from '../utils/Logger';

export class ReminderScheduler {
  private tasks: cron.ScheduledTask[] = [];

  constructor(
    private bot: TelegramBot,
    private database: Database
  ) {}

  setup(): void {
    logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');

    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    const morningTask = cron.schedule('0 9 * * *', async () => {
      logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }, {
      timezone: "Europe/Moscow",
      scheduled: false
    });

    // –î–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - 13:00
    const exerciseTask = cron.schedule('0 13 * * *', async () => {
      logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    }, {
      timezone: "Europe/Moscow", 
      scheduled: false
    });

    // –§—Ä–∞–∑—ã –¥–Ω—è - 16:00
    const phraseTask = cron.schedule('0 16 * * *', async () => {
      logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑ –¥–Ω—è...');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ—Ä–∞–∑
    }, {
      timezone: "Europe/Moscow",
      scheduled: false
    });

    // –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ - 20:00
    const eveningTask = cron.schedule('0 20 * * *', async () => {
      logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π...');
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    }, {
      timezone: "Europe/Moscow",
      scheduled: false
    });

    this.tasks.push(morningTask, exerciseTask, phraseTask, eveningTask);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
    this.tasks.forEach(task => task.start());

    logger.success('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è');
    logger.info('   üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');  
    logger.info('   üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–Ω—è');
    logger.info('   üíù 16:00 - –§—Ä–∞–∑—ã –¥–Ω—è');
    logger.info('   üåô 20:00 - –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏');
  }

  stop(): void {
  // –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º destroy(), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ stop()
  this.tasks.forEach(task => {
    task.stop();
  });
  this.tasks = [];
  logger.info('–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
}
}
