import express from 'express';
import cors from 'cors';
import path from 'path';
import { Database } from './database';
import { config } from './config';
import { createCSV } from './utils';

const app = express();
const database = new Database();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));

// –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
function authenticate(req: express.Request, res: express.Response, next: express.NextFunction) {
  const auth = req.headers.authorization;
  
  if (!auth) {
    res.setHeader('WWW-Authenticate', 'Basic realm="Admin Dashboard"');
    return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
  }

  const credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');
  const username = credentials[0];
  const password = credentials[1];

  if (username === 'admin' && password === config.security.adminPassword) {
    next();
  } else {
    res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
app.get('/dashboard', authenticate, async (req, res) => {
  try {
    await database.init();
    const stats = await database.getStats();
    const alerts = await database.getAlerts();
    const unhandledAlerts = alerts.filter(alert => !alert.handled).length;
    
    const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .header {
            background: rgba(255, 255, 255, 0.95);
            color: #667eea;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        .stat-card h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.2em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        .big-number {
            font-size: 3em;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 15px 0;
        }
        .stat-description {
            color: #666;
            font-size: 0.9em;
        }
        .actions-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            margin-bottom: 20px;
        }
        .action-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            margin: 8px 8px 8px 0;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        .action-btn:hover { 
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        }
        .alert-btn {
            background: linear-gradient(135deg, #ff6b6b, #ee5a24);
        }
        .alert-btn:hover {
            box-shadow: 0 8px 20px rgba(255, 107, 107, 0.4);
        }
        .refresh-info {
            text-align: center;
            color: rgba(255, 255, 255, 0.8);
            margin-top: 30px;
            font-size: 0.9em;
        }
        .alert-badge {
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            padding: 4px 8px;
            font-size: 0.8em;
            font-weight: bold;
            margin-left: 8px;
        }
        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        .feature-card {
            background: rgba(255, 255, 255, 0.1);
            padding: 20px;
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        .feature-card h4 {
            color: white;
            margin-bottom: 10px;
        }
        .feature-card p {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.9em;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</h1>
            <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <div class="big-number">${stats.totalUsers}</div>
                <p class="stat-description">–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
            
            <div class="stat-card">
                <h3>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è</h3>
                <div class="big-number">${stats.activeToday}</div>
                <p class="stat-description">–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            
            <div class="stat-card">
                <h3>üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å</h3>
                <div class="big-number">${stats.completedCourse}</div>
                <p class="stat-description">–ü—Ä–æ—à–ª–∏ –≤—Å–µ 7 –¥–Ω–µ–π</p>
            </div>

            <div class="stat-card">
                <h3>üö® –ê–ª–µ—Ä—Ç—ã ${unhandledAlerts > 0 ? `<span class="alert-badge">${unhandledAlerts}</span>` : ''}</h3>
                <div class="big-number">${alerts.length}</div>
                <p class="stat-description">–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
            </div>
        </div>

        <div class="actions-card">
            <h3>üì§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
            <p>–≠–∫—Å–ø–æ—Ä—Ç –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</p>
            <div style="margin-top: 15px;">
                <a href="/dashboard/export/responses" class="action-btn">üìÑ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                <a href="/dashboard/export/users" class="action-btn">üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                <a href="/dashboard/alerts" class="action-btn alert-btn">üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</a>
                <a href="/dashboard/analytics" class="action-btn">üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
            </div>
        </div>

        <div class="feature-grid">
            <div class="feature-card">
                <h4>üíô –¶–µ–ª—å –ø—Ä–æ–µ–∫—Ç–∞</h4>
                <p>–ü–æ–º–æ—á—å –ª—é–¥—è–º —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å —Å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π.</p>
            </div>
            <div class="feature-card">
                <h4>üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</h4>
                <p>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–≤–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏.</p>
            </div>
            <div class="feature-card">
                <h4>üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h4>
                <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—É—Ä—Å–∞ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.</p>
            </div>
        </div>

        <div class="refresh-info">
            <p>üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}</p>
            <p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç</p>
        </div>
    </div>

    <script>
        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        setTimeout(() => location.reload(), 300000);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–µ–ª –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            const numbers = document.querySelectorAll('.big-number');
            numbers.forEach(num => {
                const finalNumber = parseInt(num.textContent);
                let currentNumber = 0;
                const increment = finalNumber / 30;
                const timer = setInterval(() => {
                    currentNumber += increment;
                    if (currentNumber >= finalNumber) {
                        num.textContent = finalNumber;
                        clearInterval(timer);
                    } else {
                        num.textContent = Math.floor(currentNumber);
                    }
                }, 50);
            });
        });
    </script>
</body>
</html>`;

    res.send(html);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞:', error);
    res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/dashboard/export/responses', authenticate, async (req, res) => {
  try {
    await database.init();
    const responses = await database.getAllResponses();
    
    const csv = createCSV(responses, ['–ò–º—è', 'Telegram ID', '–î–µ–Ω—å', '–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞', '–û—Ç–≤–µ—Ç', '–î–∞—Ç–∞']);
    
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', 'attachment; filename=user-responses.csv');
    res.send('\ufeff' + csv); // UTF-8 BOM –¥–ª—è Excel
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/dashboard/export/users', authenticate, async (req, res) => {
  try {
    await database.init();
    const users = await database.getAllUsers();
    
    const csv = createCSV(users, ['–ò–º—è', 'Telegram ID', '–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å', '–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']);
    
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', 'attachment; filename=users.csv');
    res.send('\ufeff' + csv);
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
  }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
app.get('/dashboard/alerts', authenticate, async (req, res) => {
  try {
    await database.init();
    const alerts = await database.getAlerts();
    
    const alertsHtml = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        .back-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 24px;
            text-decoration: none;
            border-radius: 8px;
            margin-bottom: 20px;
            display: inline-block;
            transition: transform 0.3s ease;
        }
        .back-btn:hover { transform: translateY(-2px); }
        h1 { color: #333; margin-bottom: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 20px; }
        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }
        th { background: linear-gradient(135deg, #667eea, #764ba2); color: white; }
        .alert-new { background: #ffebee; }
        .alert-handled { background: #e8f5e8; }
        .message-preview { max-width: 300px; overflow: hidden; text-overflow: ellipsis; }
        .no-alerts {
            text-align: center;
            padding: 60px;
            color: #666;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/dashboard" class="back-btn">‚Üê –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É</a>
        <h1>üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h1>
        
        ${alerts.length === 0 ? '<div class="no-alerts">–ê–ª–µ—Ä—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç üòä<br>–≠—Ç–æ —Ö–æ—Ä–æ—à–æ!</div>' : `
        <table>
            <tr>
                <th>–î–∞—Ç–∞</th>
                <th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
                <th>–¢—Ä–∏–≥–≥–µ—Ä</th>
                <th>–°–æ–æ–±—â–µ–Ω–∏–µ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
            </tr>
            ${alerts.map(alert => `
            <tr class="${alert.handled ? 'alert-handled' : 'alert-new'}">
                <td>${new Date(alert.created_at).toLocaleString('ru-RU')}</td>
                <td>${alert.name || '–ê–Ω–æ–Ω–∏–º'}<br><small>${alert.telegram_id}</small></td>
                <td><strong>${alert.trigger_word}</strong></td>
                <td class="message-preview">${alert.message.substring(0, 100)}${alert.message.length > 100 ? '...' : ''}</td>
                <td>${alert.handled ? '‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω' : 'üî¥ –ù–æ–≤—ã–π'}</td>
            </tr>
            `).join('')}
        </table>
        `}
    </div>
</body>
</html>`;

    res.send(alertsHtml);
  } catch (error) {
    res.status(500).send('–û—à–∏–±–∫–∞: ' + error);
  }
});

// API –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', authenticate, async (req, res) => {
  try {
    await database.init();
    const stats = await database.getStats();
    res.json(stats);
  } catch (error) {
    res.status(500).json({ error: error });
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (—Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –¥–∞—à–±–æ—Ä–¥)
app.get('/', (req, res) => {
  res.redirect('/dashboard');
});

const PORT = config.server.port;

if (require.main === module) {
  database.init().then(() => {
    app.listen(PORT, () => {
      console.log(`üìä –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üåê –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}/dashboard`);
      console.log(`üîê –õ–æ–≥–∏–Ω: admin, –ü–∞—Ä–æ–ª—å: ${config.security.adminPassword}`);
    });
  }).catch(console.error);
}

export default app;