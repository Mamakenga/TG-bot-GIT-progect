// src/bot.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

import TelegramBot from 'node-telegram-bot-api';
import { config } from './config';
import { Database } from './database';
import { courseContent, getDayContent } from './course-logic';
import { checkForAlerts, sendAlert } from './utils';
import { ExpressServer } from './server/ExpressServer';
import { ReminderScheduler } from './scheduling/ReminderScheduler';
import { KeyboardManager } from './keyboards/KeyboardManager';
import { CommandHandlers } from './handlers/CommandHandlers';
import { logger } from './utils/Logger';

class SelfCareBot {
  private bot: TelegramBot;
  private expressServer: ExpressServer;
  private database: Database;
  private reminderScheduler: ReminderScheduler;
  private commandHandlers: CommandHandlers;
  private keyboardManager: KeyboardManager;

  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { 
      polling: false,
      webHook: false
    });
    this.database = new Database();
    this.expressServer = new ExpressServer(this.bot, this.database);
    this.reminderScheduler = new ReminderScheduler(this.bot, this.database);
    this.keyboardManager = new KeyboardManager();
    this.commandHandlers = new CommandHandlers(this.bot, this.database, this.keyboardManager);
    
    this.setupHandlers();
  }

  async init(): Promise<void> {
    try {
      logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await this.database.init();
      
      const PORT = Number(process.env.PORT) || 3000;
      
      logger.info('–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
      await this.expressServer.start(PORT);

      logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      this.reminderScheduler.setup();

      logger.success(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.success('Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      logger.info(`–î–∞—à–±–æ—Ä–¥: ${process.env.DASHBOARD_URL || 'http://localhost:3000'}/dashboard`);

      if (process.env.NODE_ENV === 'production') {
        logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
        this.setupWebhook();
      } else {
        logger.info('–ó–∞–ø—É—Å–∫ polling...');
        this.bot.startPolling();
        logger.success('Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
      }

      // Graceful shutdown
      const shutdown = async (signal: string) => {
        logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
        try {
          this.reminderScheduler.stop();
          await this.database.close();
          logger.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
          process.exit(0);
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏', error);
          process.exit(1);
        }
      };

      process.on('SIGTERM', () => shutdown('SIGTERM'));
      process.on('SIGINT', () => shutdown('SIGINT'));

    } catch (error) {
      logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
      process.exit(1);
    }
  }

  private setupWebhook(): void {
    const url = process.env.DASHBOARD_URL || 'https://tg-bot-git-progect-production.up.railway.app';
    const webhookUrl = `${url}/bot${config.telegram.token}`;
    
    this.bot.setWebHook(webhookUrl).then(() => {
      logger.success(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
      logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook', error);
    });
  }

  private setupHandlers(): void {
    // –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ CommandHandlers
    this.bot.onText(/\/start/, this.commandHandlers.handleStart.bind(this.commandHandlers));
    this.bot.onText(/\/help/, this.commandHandlers.handleHelp.bind(this.commandHandlers));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    this.bot.onText(/\/test/, this.handleTest.bind(this));
    this.bot.onText(/\/pause/, this.handlePause.bind(this));
    this.bot.onText(/\/resume/, this.handleResume.bind(this));
    this.bot.onText(/\/testday (\d+)/, this.handleTestDay.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    this.bot.onText(/^üå± –°—Ç–∞—Ä—Ç$/, this.commandHandlers.handleStart.bind(this.commandHandlers));
    this.bot.onText(/^üå± –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$/, this.handleRestart.bind(this));
    this.bot.onText(/^üìã –ü–æ–º–æ—â—å$/, this.commandHandlers.handleHelp.bind(this.commandHandlers));
    this.bot.onText(/^‚è∏Ô∏è –ü–∞—É–∑–∞$/, this.handlePause.bind(this));
    this.bot.onText(/^‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$/, this.handleResume.bind(this));
    this.bot.onText(/^üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å$/, this.commandHandlers.handleProgress.bind(this.commandHandlers));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.commandHandlers.handleCallback.bind(this.commandHandlers));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞', error);
    });

    this.bot.on('polling_error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ polling', error);
    });

    this.bot.on('webhook_error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ webhook', error);
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection', reason);
    });

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception', error);
      setTimeout(() => {
        process.exit(1);
      }, 1000);
    });
  }

  // –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Å—Ç—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\nüö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: 112\n\n–¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day || 1, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleText', error);
    }
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.pauseUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ üíô', {
        reply_markup: KeyboardManager.getMainKeyboard(user)
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handlePause', error);
    }
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.resumeUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±', {
        reply_markup: KeyboardManager.getMainKeyboard(user)
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleResume', error);
    }
  }

  private async handleRestart(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      await this.database.resetUserProgress(telegramId);
      await this.database.updateUserDay(telegramId, 1);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(chatId, 
        `üéâ –û—Ç–ª–∏—á–Ω–æ${name ? `, ${name}` : ''}! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ!\n\n–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 —É—Ç—Ä–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω–æ–≤–æ? üíô`, {
        reply_markup: KeyboardManager.getMainKeyboard(user)
      });
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleRestart', error);
    }
  }

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î handleTest –≤ bot.ts

private async handleTest(msg: TelegramBot.Message): Promise<void> {
  const telegramId = msg.from?.id;
  const chatId = msg.chat.id;
  
  if (!telegramId) return;

  try {
    const user = await this.database.getUser(telegramId);
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /start');
      return;
    }

    const currentDay = user.current_day || 1;
    const dayContent = getDayContent(currentDay);
    
    if (!dayContent) {
      await this.bot.sendMessage(chatId, '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï 4 –°–û–û–ë–©–ï–ù–ò–Ø –î–ù–Ø –° –ò–ù–¢–ï–†–í–ê–õ–ê–ú–ò

    // 1. –£–¢–†–ï–ù–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï
    await this.bot.sendMessage(chatId, `üß™ –¢–ï–°–¢: –î–µ–Ω—å ${currentDay} - –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø\n\n=== 09:00 –£–¢–†–û ===`);
    await this.bot.sendMessage(chatId, dayContent.morningMessage);

    // 2. –£–ü–†–ê–ñ–ù–ï–ù–ò–ï (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)
    setTimeout(async () => {
      try {
        await this.bot.sendMessage(chatId, `=== 13:00 –£–ü–†–ê–ñ–ù–ï–ù–ò–ï ===`);
        await this.bot.sendMessage(chatId, dayContent.exerciseMessage, {
          reply_markup: {
            inline_keyboard: [[
              { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
              { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
              { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
            ]]
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', error);
      }
    }, 3000);

    // 3. –§–†–ê–ó–ê –î–ù–Ø (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)
    setTimeout(async () => {
      try {
        await this.bot.sendMessage(chatId, `=== 16:00 –§–†–ê–ó–ê –î–ù–Ø ===`);
        await this.bot.sendMessage(chatId, dayContent.phraseOfDay, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_resonates` },
              { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
              { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_difficult` }
            ]]
          }
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –¥–Ω—è:', error);
      }
    }, 6000);

    // 4. –í–ï–ß–ï–†–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï (—á–µ—Ä–µ–∑ 10 —Å–µ–∫)
    setTimeout(async () => {
      try {
        await this.bot.sendMessage(chatId, `=== 20:00 –í–ï–ß–ï–†–ù–Ø–Ø –†–ï–§–õ–ï–ö–°–ò–Ø ===`);
        await this.bot.sendMessage(chatId, dayContent.eveningMessage, {
          reply_markup: dayContent.options ? {
            inline_keyboard: dayContent.options.map((option, index) => [{
              text: option.text,
              callback_data: `day_${currentDay}_evening_${index}`
            }])
          } : undefined
        });
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    }, 9000);

    // 5. –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ê (—á–µ—Ä–µ–∑ 12 —Å–µ–∫)
    setTimeout(async () => {
      try {
        await this.bot.sendMessage(chatId, 
          `‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!\n\n` +
          `–¢—ã –ø–æ–ª—É—á–∏–ª–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–Ω—è ${currentDay}.\n` +
          `–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n` +
          `‚Ä¢ /nextday - –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω—é ${currentDay + 1}\n` +
          `‚Ä¢ /testday 3 - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–Ω—å 3\n` +
          `‚Ä¢ /test - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è`
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
      }
    }, 12000);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTest:', error);
    await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
  }
}

private async handleTestDay(msg: TelegramBot.Message, match: RegExpExecArray | null): Promise<void> {
  const telegramId = msg.from?.id;
  const chatId = msg.chat.id;
  const dayNumber = match ? parseInt(match[1]) : 1;

  if (!telegramId) return;

  try {
    if (dayNumber < 1 || dayNumber > 7) {
      await this.bot.sendMessage(chatId, '–£–∫–∞–∂–∏ –¥–µ–Ω—å –æ—Ç 1 –¥–æ 7. –ù–∞–ø—Ä–∏–º–µ—Ä: /testday 3');
      return;
    }

    const dayContent = getDayContent(dayNumber);
    if (!dayContent) {
      await this.bot.sendMessage(chatId, `–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è ${dayNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä –¥–Ω—è
    await this.bot.sendMessage(chatId, 
      `üìñ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–†: –î–µ–Ω—å ${dayNumber}\n` +
      `üìã –¢–µ–º–∞: "${dayContent.title}"\n\n` +
      `=== –£–¢–†–û ===\n${dayContent.morningMessage}\n\n` +
      `=== –£–ü–†–ê–ñ–ù–ï–ù–ò–ï ===\n${dayContent.exerciseMessage}\n\n` +
      `=== –§–†–ê–ó–ê –î–ù–Ø ===\n${dayContent.phraseOfDay}\n\n` +
      `=== –í–ï–ß–ï–† ===\n${dayContent.eveningMessage}`
    );

    if (dayContent.options) {
      await this.bot.sendMessage(chatId, 
        `üîò –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n` +
        dayContent.options.map((opt, i) => `${i + 1}. ${opt.text}`).join('\n')
      );
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTestDay:', error);
    await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –¥–Ω—è');
  }
}

  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) return;

    try {
      const stats = await this.database.getStats();
      const statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –í—Å–µ–≥–æ: ${stats.totalUsers}\nüìà –°–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\nüéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completedCourse}`;
      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;