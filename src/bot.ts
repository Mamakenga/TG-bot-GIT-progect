console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import cors from 'cors';
import cron from 'node-cron';
import { config } from './config';
import { Database, DbUser } from './database';
import { courseContent, getDayContent } from './course-logic';
import { checkForAlerts, sendAlert } from './utils';
import { ReminderType } from './types';

class SelfCareBot {
  private bot: TelegramBot;
  private app: express.Application;
  private database: Database;

  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { 
      polling: false,
      webHook: false
    });
    
    this.app = express();
    this.database = new Database();
    
    this.setupMiddleware();
    this.setupHandlers();
    this.setupAdminRoutes();
    this.setupReminders();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.static('public'));
    
    this.app.use((req, res, next) => {
      req.setTimeout(25000);
      next();
    });
  }

  async init(): Promise<void> {
    await this.database.init();
    
    const PORT = Number(process.env.PORT) || 3000;
    
    this.app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
      console.log(`üìä –î–∞—à–±–æ—Ä–¥: ${process.env.DASHBOARD_URL || 'http://localhost:3000'}/dashboard`);
      
      if (process.env.NODE_ENV === 'production') {
        this.setupWebhook();
      } else {
        this.bot.startPolling();
        console.log('üîÑ Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
      }
    });
  }

  private setupWebhook(): void {
    const url = process.env.DASHBOARD_URL || 'https://tg-bot-git-progect-production.up.railway.app';
    const webhookUrl = `${url}/bot${config.telegram.token}`;
    
    this.bot.setWebHook(webhookUrl).then(() => {
      console.log(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    });
  }

  private setupHandlers(): void {
    // Webhook endpoint –¥–ª—è Telegram
    this.app.post(`/bot${config.telegram.token}`, async (req, res) => {
      try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
        await this.bot.processUpdate(req.body);
        res.status(200).json({ ok: true });
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(200).json({ ok: false, error: 'Internal error' });
      }
    });

    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    this.bot.onText(/\/pause/, this.handlePause.bind(this));
    this.bot.onText(/\/resume/, this.handleResume.bind(this));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.handleCallback.bind(this));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    });

    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
    });
  }

  // === –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===
  private setupReminders(): void {
    // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - 9:00 –ø–æ UTC (12:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
    cron.schedule('0 9 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      await this.sendMorningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    // –î–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - 13:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    cron.schedule('0 13 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...');
      await this.sendExerciseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    // –§—Ä–∞–∑—ã –¥–Ω—è - 16:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏  
    cron.schedule('0 16 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑ –¥–Ω—è...');
      await this.sendPhraseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    // –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ - 20:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
    cron.schedule('0 20 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π...');
      await this.sendEveningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    console.log('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:');
    console.log('   üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');  
    console.log('   üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–Ω—è');
    console.log('   üíù 16:00 - –§—Ä–∞–∑—ã –¥–Ω—è');
    console.log('   üåô 20:00 - –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏');
  }

  // –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –Ω–æ–≤—ã–π –¥–µ–Ω—å –∫—É—Ä—Å–∞
  private async sendMorningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      for (const user of activeUsers) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –∫—É—Ä—Å
          if (user.course_completed || user.current_day > 7) {
            continue;
          }

          const dayContent = getDayContent(user.current_day);
          if (!dayContent) {
            console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è ${user.current_day} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            continue;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await this.bot.sendMessage(user.telegram_id, dayContent.morningMessage, {
            reply_markup: dayContent.options ? {
              inline_keyboard: [
                dayContent.options.map((option, index) => ({
                  text: option.text,
                  callback_data: `day_${user.current_day}_morning_${index}`
                }))
              ]
            } : undefined
          });

          console.log(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${user.current_day})`);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendMorningMessages:', error);
    }
  }

  // –î–Ω–µ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  private async sendExerciseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || user.current_day > 7) continue;

          const dayContent = getDayContent(user.current_day);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.exerciseMessage, {
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${user.current_day}_exercise_ready` },
                { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${user.current_day}_exercise_help` },
                { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${user.current_day}_exercise_later` }
              ]]
            }
          });

          console.log(`‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${user.current_day})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendExerciseMessages:', error);
    }
  }

  // –§—Ä–∞–∑—ã –¥–Ω—è
  private async sendPhraseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || user.current_day > 7) continue;

          const dayContent = getDayContent(user.current_day);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.phraseOfDay, {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${user.current_day}_phrase_good` },
                { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${user.current_day}_phrase_strange` },
                { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${user.current_day}_phrase_hard` }
              ]]
            }
          });

          console.log(`‚úÖ –§—Ä–∞–∑–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${user.current_day})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPhraseMessages:', error);
    }
  }

  // –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏
  private async sendEveningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || user.current_day > 7) continue;

          const dayContent = getDayContent(user.current_day);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.eveningMessage, {
            reply_markup: dayContent.options ? {
              inline_keyboard: [
                dayContent.options.map((option, index) => ({
                  text: option.text,
                  callback_data: `day_${user.current_day}_evening_${index}`
                }))
              ]
            } : undefined
          });

          console.log(`‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${user.current_day})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendEveningMessages:', error);
    }
  }

  // === ADMIN ROUTES === (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)
  private setupAdminRoutes(): void {
    const authenticate = (req: express.Request, res: express.Response, next: express.NextFunction) => {
      const auth = req.headers.authorization;
      if (!auth) {
        res.setHeader('WWW-Authenticate', 'Basic realm="Admin Dashboard"');
        return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      const credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');
      if (credentials[0] === 'admin' && credentials[1] === config.security.adminPassword) {
        next();
      } else {
        res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
    };

    this.app.get('/dashboard', authenticate, async (req, res) => {
      try {
        const stats = await this.database.getStats();
        const alerts = await this.database.getAlerts();
        const unhandledAlerts = alerts.filter((alert: any) => !alert.handled).length;
        
        const html = `<!DOCTYPE html>
<html lang="ru">
<head><meta charset="UTF-8"><title>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞</title></head>
<body>
<h1>üìä –î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</h1>
<p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers} | –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday} | –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: ${stats.completedCourse} | –ê–ª–µ—Ä—Ç–æ–≤: ${alerts.length}${unhandledAlerts > 0 ? ` (${unhandledAlerts} –Ω–æ–≤—ã—Ö)` : ''}</p>
<p><a href="/dashboard/export/responses">üìÑ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–≤–µ—Ç–æ–≤</a> | <a href="/dashboard/export/users">üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</a></p>
</body></html>`;
        res.send(html);
      } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
      }
    });

    this.app.get('/', (req, res) => res.redirect('/dashboard'));
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î === (—É–ø—Ä–æ—â–µ–Ω—ã)
  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (${name}) –∑–∞–ø—É—Å—Ç–∏–ª /start`);
      
      await this.database.createUser(telegramId, name);
      
      await this.bot.sendMessage(chatId, 
        `üå∏ –ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ.

–ó–∞ 7 –¥–Ω–µ–π –º—ã –º—è–≥–∫–æ –∏—Å—Å–ª–µ–¥—É–µ–º, –∫–∞–∫ –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ.

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?`, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üå± –î–∞, –≥–æ—Ç–æ–≤–∞', callback_data: 'start_yes' },
            { text: '‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'more_info' },
            { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
          ]]
        }
      });
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleStart:`, error);
      try {
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –µ—â–µ —Ä–∞–∑.');
      } catch {}
    }
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = callbackQuery.message?.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!chatId || !data) return;

    try {
      await this.bot.answerCallbackQuery(callbackQuery.id);

      if (data === 'start_yes') {
        await this.database.updateUserDay(telegramId, 1);
        await this.bot.sendMessage(chatId, 
          `üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å!\n\n` +
          `–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 —É—Ç—Ä–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n` +
          `–ó–∞ –¥–µ–Ω—å –±—É–¥–µ—Ç 3-4 —Å–æ–æ–±—â–µ–Ω–∏—è:\n` +
          `üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n` +
          `üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è\n` +
          `üíù 16:00 - –§—Ä–∞–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è\n` +
          `üåô 20:00 - –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è\n\n` +
          `–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞? üíô`
        );
      } else if (data === 'more_info') {
        const infoText = `üìö –ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –¥–Ω–µ–π:\n\n` +
          courseContent.map((day, index) => `üìÖ –î–µ–Ω—å ${index + 1}: ${day.title}`).join('\n') +
          `\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - 3-4 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?`;

        await this.bot.sendMessage(chatId, infoText, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üå± –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!', callback_data: 'start_yes' },
              { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
            ]]
          }
        });
      } else if (data === 'later') {
        await this.bot.sendMessage(chatId, '–ü–æ–Ω–∏–º–∞—é ü§ó –ù–∞–ø–∏—à–∏ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–Ω–∏ –∫—É—Ä—Å–∞
      if (data.startsWith('day_')) {
        await this.handleDayCallback(chatId, telegramId, data);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleCallback:`, error);
    }
  }

  private async handleDayCallback(chatId: number, telegramId: number, data: string): Promise<void> {
    try {
      const user = await this.database.getUser(telegramId);
      if (!user) return;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await this.database.saveResponse(user.id, user.current_day, 'button_choice', data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      const responses = [
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! üíô',
        '–í–∞–∂–Ω–æ, —á—Ç–æ —Ç—ã –æ—Ç–∫–ª–∏–∫–∞–µ—à—å—Å—è üå∏', 
        '–¢–≤–æ—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω–Ω–∞ üíô',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —É—á–∞—Å—Ç–∏–µ ü§ó'
      ];
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      await this.bot.sendMessage(chatId, randomResponse);

      // –ï—Å–ª–∏ —ç—Ç–æ –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
      if (data.includes('_evening_')) {
        const nextDay = user.current_day + 1;
        if (nextDay <= 7) {
          await this.database.updateUserDay(telegramId, nextDay);
          await this.database.markDayCompleted(user.id, user.current_day);
        } else {
          await this.database.markCourseCompleted(telegramId);
          await this.bot.sendMessage(chatId, 
            `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ!\n\n` +
            `–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üíô`
          );
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleDayCallback:', error);
    }
  }

  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n` +
            `üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: 112\n\n–¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleText:', error);
    }
  }

  private async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const helpText = `üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n` +
      `üå∏ –ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å –∫—É—Ä—Å\n/help - –°–ø—Ä–∞–≤–∫–∞\n/pause - –ü–∞—É–∑–∞\n\n` +
      `üíô –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ\n3-4 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å\n\n` +
      `üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: help@harmony4soul.com`;
    await this.bot.sendMessage(msg.chat.id, helpText);
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. /start –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è üíô');
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±');
  }

  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) return;

    try {
      const stats = await this.database.getStats();
      const statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
        `üë• –í—Å–µ–≥–æ: ${stats.totalUsers}\nüìà –°–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\nüéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completedCourse}`;
      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;