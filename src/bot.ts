console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import cors from 'cors';
import cron from 'node-cron';
import { config } from './config';
import { Database } from './database';
import { courseContent } from './course-logic';
import { checkForAlerts, sendAlert, createCSV } from './utils';

class SelfCareBot {
  private bot: TelegramBot;
  private app: express.Application;
  private database: Database;

  constructor() {
    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –±–æ—Ç–∞
    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó webhook, –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–æ–∑–∂–µ
    this.bot = new TelegramBot(config.telegram.token, { polling: false });
    this.app = express();
    this.database = new Database();
    
    this.setupMiddleware();
    this.setupHandlers();
    this.setupAdminRoutes();
    this.setupReminders();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(express.json());
    this.app.use(express.static('public'));
  }

  async init(): Promise<void> {
    await this.database.init();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –û–î–ò–ù —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ
    const PORT = Number(process.env.PORT) || 3000;
    
    this.app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
      console.log(`üìä –î–∞—à–±–æ—Ä–¥: https://tg-bot-git-progect.up.railway.app/dashboard`);
      
      // –ü–û–°–õ–ï –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
      if (process.env.NODE_ENV === 'production') {
        this.setupWebhook();
      } else {
        // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
        this.bot.startPolling();
        console.log('üîÑ Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
      }
    });
  }

  private setupWebhook(): void {
    const url = 'https://tg-bot-git-progect.up.railway.app';
    const webhookUrl = `${url}/bot${config.telegram.token}`;
    
    this.bot.setWebHook(webhookUrl).then(() => {
      console.log(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
      console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    });
  }

  private setupHandlers(): void {
    // Webhook endpoint –¥–ª—è Telegram
    this.app.post(`/bot${config.telegram.token}`, (req, res) => {
      console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
      this.bot.processUpdate(req.body);
      res.sendStatus(200);
    });

    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    this.bot.onText(/\/pause/, this.handlePause.bind(this));
    this.bot.onText(/\/resume/, this.handleResume.bind(this));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.handleCallback.bind(this));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    });
  }

  // === ADMIN ROUTES ===
  private setupAdminRoutes(): void {
    // –ü—Ä–æ—Å—Ç–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    const authenticate = (req: express.Request, res: express.Response, next: express.NextFunction) => {
      const auth = req.headers.authorization;
      
      if (!auth) {
        res.setHeader('WWW-Authenticate', 'Basic realm="Admin Dashboard"');
        return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }

      const credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');
      const username = credentials[0];
      const password = credentials[1];

      if (username === 'admin' && password === config.security.adminPassword) {
        next();
      } else {
        res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
    };

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
    this.app.get('/dashboard', authenticate, async (req, res) => {
      try {
        const stats = await this.database.getStats();
        const alerts = await this.database.getAlerts();
        const unhandledAlerts = alerts.filter((alert: any) => !alert.handled).length;
        
        const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .header {
            background: rgba(255, 255, 255, 0.95);
            color: #667eea;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .stat-card h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        .big-number {
            font-size: 3em;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 15px 0;
        }
        .actions-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .action-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            margin: 8px 8px 8px 0;
            transition: all 0.3s ease;
        }
        .action-btn:hover { 
            transform: translateY(-2px);
        }
        .alert-badge {
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            padding: 4px 8px;
            font-size: 0.8em;
            margin-left: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</h1>
            <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <div class="big-number">${stats.totalUsers}</div>
                <p>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
            
            <div class="stat-card">
                <h3>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è</h3>
                <div class="big-number">${stats.activeToday}</div>
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            
            <div class="stat-card">
                <h3>üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å</h3>
                <div class="big-number">${stats.completedCourse}</div>
                <p>–ü—Ä–æ—à–ª–∏ –≤—Å–µ 7 –¥–Ω–µ–π</p>
            </div>

            <div class="stat-card">
                <h3>üö® –ê–ª–µ—Ä—Ç—ã ${unhandledAlerts > 0 ? `<span class="alert-badge">${unhandledAlerts}</span>` : ''}</h3>
                <div class="big-number">${alerts.length}</div>
                <p>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
            </div>
        </div>

        <div class="actions-card">
            <h3>üì§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
            <p>–≠–∫—Å–ø–æ—Ä—Ç –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</p>
            <div style="margin-top: 15px;">
                <a href="/dashboard/export/responses" class="action-btn">üìÑ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                <a href="/dashboard/export/users" class="action-btn">üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                <a href="/dashboard/alerts" class="action-btn">üö® –ê–ª–µ—Ä—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</a>
            </div>
        </div>

        <div style="text-align: center; color: rgba(255, 255, 255, 0.8); margin-top: 30px;">
            <p>üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
    </div>
</body>
</html>`;

        res.send(html);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞:', error);
        res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
      }
    });

    // –¢–µ—Å—Ç–æ–≤—ã–π endpoint
    this.app.get('/test', (req, res) => {
      res.json({ 
        status: 'OK', 
        time: new Date().toISOString(),
        env: process.env.NODE_ENV,
        port: process.env.PORT 
      });
    });

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    this.app.get('/dashboard/export/responses', authenticate, async (req, res) => {
      try {
        const responses = await this.database.getAllResponses();
        const csv = createCSV(responses, ['–ò–º—è', 'Telegram ID', '–î–µ–Ω—å', '–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞', '–û—Ç–≤–µ—Ç', '–î–∞—Ç–∞']);
        
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', 'attachment; filename=user-responses.csv');
        res.send('\ufeff' + csv);
      } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
      }
    });

    this.app.get('/dashboard/export/users', authenticate, async (req, res) => {
      try {
        const users = await this.database.getAllUsers();
        const csv = createCSV(users, ['–ò–º—è', 'Telegram ID', '–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å', '–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']);
        
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', 'attachment; filename=users.csv');
        res.send('\ufeff' + csv);
      } catch (error) {
        res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
      }
    });

    // –†–µ–¥–∏—Ä–µ–∫—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –¥–∞—à–±–æ—Ä–¥
    this.app.get('/', (req, res) => {
      res.redirect('/dashboard');
    });
  }

  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      await this.database.createUser(telegramId, name);
      
      await this.bot.sendMessage(chatId, 
        `üå∏ –ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ.

–ó–∞ 7 –¥–Ω–µ–π –º—ã –º—è–≥–∫–æ –∏—Å—Å–ª–µ–¥—É–µ–º, –∫–∞–∫ –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ. 
–ù–µ —á–µ—Ä–µ–∑ –Ω–∞—Å–∏–ª–∏–µ –∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ, –∞ —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–±–æ—Ç—É.

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–µ–±–µ?`, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üå± –î–∞, –≥–æ—Ç–æ–≤–∞', callback_data: 'start_yes' },
            { text: '‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'more_info' },
            { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
          ]]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = callbackQuery.message?.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!chatId || !data) return;

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.handleStart(callbackQuery.message!);
        return;
      }

      await this.bot.answerCallbackQuery(callbackQuery.id);

      switch (data) {
        case 'start_yes':
          await this.startDay1(chatId, telegramId);
          break;
        
        case 'more_info':
          await this.showCourseInfo(chatId);
          break;

        case 'later':
          await this.bot.sendMessage(chatId, '–ü–æ–Ω–∏–º–∞—é ü§ó –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ —Ç—Ä–µ–±—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.\n\n–ù–∞–ø–∏—à–∏ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.');
          break;

        default:
          if (data.startsWith('day_')) {
            await this.handleDayResponse(chatId, telegramId, data);
          }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleCallback:', error);
    }
  }

  private async startDay1(chatId: number, telegramId: number): Promise<void> {
    const day1 = courseContent[0];
    
    await this.bot.sendMessage(chatId, day1.baseContent, {
      reply_markup: {
        inline_keyboard: [
          day1.options?.map((option: any, index: number) => ({
            text: option.text,
            callback_data: `day_1_${index}`
          })) || []
        ]
      }
    });

    await this.database.updateUserDay(telegramId, 1);
  }

  private async handleDayResponse(chatId: number, telegramId: number, data: string): Promise<void> {
    const [, dayStr, optionStr] = data.split('_');
    const day = parseInt(dayStr);
    const optionIndex = parseInt(optionStr);

    const dayContent = courseContent[day - 1];
    const option = dayContent.options?.[optionIndex];

    if (!option) return;

    const user = await this.database.getUser(telegramId);
    if (!user) return;

    await this.database.saveResponse(user.id, day, 'button_choice', option.text);
    await this.bot.sendMessage(chatId, option.response);
    await this.scheduleNextDay(chatId, telegramId, day);
  }

  private async scheduleNextDay(chatId: number, telegramId: number, currentDay: number): Promise<void> {
    if (currentDay < 7) {
      setTimeout(async () => {
        const nextDay = currentDay + 1;
        const nextDayContent = courseContent[nextDay - 1];
        
        await this.bot.sendMessage(chatId, `üåÖ –î–µ–Ω—å ${nextDay}: ${nextDayContent.title}\n\n${nextDayContent.baseContent}`, {
          reply_markup: {
            inline_keyboard: [
              nextDayContent.options?.map((option: any, index: number) => ({
                text: option.text,
                callback_data: `day_${nextDay}_${index}`
              })) || []
            ]
          }
        });

        await this.database.updateUserDay(telegramId, nextDay);
      }, 60000);
    } else {
      await this.bot.sendMessage(chatId, 
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ!\n\n` +
        `–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª–∞ –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –Ω–∞—É—á–∏–ª–∞—Å—å –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ.\n\n` +
        `–ü–æ–º–Ω–∏: –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ - —ç—Ç–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –±—É–¥—å —Å—á–∞—Å—Ç–ª–∏–≤–∞! üíô`
      );
      
      await this.database.markCourseCompleted(telegramId);
    }
  }

  private async showCourseInfo(chatId: number): Promise<void> {
    const infoText = `üìö –ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –¥–Ω–µ–π:\n\n` +
      courseContent.map((day: any, index: number) => `üìÖ –î–µ–Ω—å ${index + 1}: ${day.title}`).join('\n') +
      `\n\n–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç.\n–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?`;

    await this.bot.sendMessage(chatId, infoText, {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üå± –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!', callback_data: 'start_yes' },
          { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
        ]]
      }
    });
  }

  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n–¢–≤–æ—è –∂–∏–∑–Ω—å —Ü–µ–Ω–Ω–∞ –∏ –≤–∞–∂–Ω–∞.\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n` +
            `üö® –°–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏: 112\nüí¨ –°–∞–π—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: www.harmony4soul.com\n\n` +
            `–Ø –æ—Å—Ç–∞—é—Å—å —Å —Ç–æ–±–æ–π. –¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã –¥–ª—è –º–µ–Ω—è üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleText:', error);
    }
  }

  private async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const helpText = `üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n` +
      `üå∏ –ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω–æ–≤–æ\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
      `/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å\n/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å\n\n` +
      `üíô –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n–≠—Ç–æ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n` +
      `üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\nhelp@harmony4soul.com`;

    await this.bot.sendMessage(msg.chat.id, helpText);
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /resume –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üíô');
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±');
  }

  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) {
      return;
    }

    try {
      const stats = await this.database.getStats();
      
      let statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
      statsText += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      statsText += `üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\n`;
      statsText += `üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: ${stats.completedCourse}\n\n`;
      statsText += `üìä –î–∞—à–±–æ—Ä–¥: https://tg-bot-git-progect.up.railway.app/dashboard\n`;

      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  private setupReminders(): void {
    cron.schedule('0 9 * * *', async () => {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    });

    cron.schedule('0 20 * * *', async () => {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    });
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;