// src/bot.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

import TelegramBot from 'node-telegram-bot-api';
import { config } from './config';
import { Database } from './database';
import { courseContent, getDayContent } from './course-logic';
import { checkForAlerts, sendAlert } from './utils';
import { ExpressServer } from './server/ExpressServer';
import { ReminderScheduler } from './scheduling/ReminderScheduler';
import { KeyboardManager } from './keyboards/KeyboardManager';
import { CommandHandlers } from './handlers/CommandHandlers';
import { logger } from './utils/Logger';
import cron from 'node-cron';

class SelfCareBot {
  private bot: TelegramBot;
  private expressServer: ExpressServer;
  private database: Database;
  private reminderScheduler: ReminderScheduler;
  private commandHandlers: CommandHandlers;
  private keyboardManager: KeyboardManager;

  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { 
      polling: false,
      webHook: false
    });
    this.database = new Database();
    this.expressServer = new ExpressServer(this.bot, this.database);
    this.reminderScheduler = new ReminderScheduler(this.bot, this.database);
    this.keyboardManager = new KeyboardManager();
    this.commandHandlers = new CommandHandlers(this.bot, this.database, this.keyboardManager);
    
    this.setupHandlers();
    this.setupReminders();
  }

  async init(): Promise<void> {
    try {
      logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await this.database.init();
      
      const PORT = Number(process.env.PORT) || 3000;
      
      logger.info('–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
      await this.expressServer.start(PORT);

      logger.success(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      logger.success('Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω');
      logger.info(`–î–∞—à–±–æ—Ä–¥: ${process.env.DASHBOARD_URL || 'http://localhost:3000'}/dashboard`);

      if (process.env.NODE_ENV === 'production') {
        logger.info('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
        this.setupWebhook();
      } else {
        logger.info('–ó–∞–ø—É—Å–∫ polling...');
        this.bot.startPolling();
        logger.success('Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
      }

      // Graceful shutdown
      const shutdown = async (signal: string) => {
        logger.info(`–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
        try {
          await this.database.close();
          logger.success('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
          process.exit(0);
        } catch (error) {
          logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏', error);
          process.exit(1);
        }
      };

      process.on('SIGTERM', () => shutdown('SIGTERM'));
      process.on('SIGINT', () => shutdown('SIGINT'));

    } catch (error) {
      logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
      process.exit(1);
    }
  }

  private setupWebhook(): void {
    const url = process.env.DASHBOARD_URL || 'https://tg-bot-git-progect-production.up.railway.app';
    const webhookUrl = `${url}/bot${config.telegram.token}`;
    
    this.bot.setWebHook(webhookUrl).then(() => {
      logger.success(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
      logger.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook', error);
    });
  }

  private setupHandlers(): void {
    // –ö–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ CommandHandlers
    this.bot.onText(/\/start/, this.commandHandlers.handleStart.bind(this.commandHandlers));
    this.bot.onText(/\/help/, this.commandHandlers.handleHelp.bind(this.commandHandlers));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    
    // ‚úÖ –í–ê–ñ–ù–û: –ö–û–ú–ê–ù–î–´ –ê–ù–¢–ò–î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ü–ï–†–ï–î /test!
this.bot.onText(/\/testreminder$/, this.handleTestReminder.bind(this));
this.bot.onText(/\/clearlogs$/, this.handleClearLogs.bind(this));
this.bot.onText(/\/checklogs$/, this.handleCheckLogs.bind(this));

// ‚úÖ –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø (–ü–û–°–õ–ï –∫–æ–º–∞–Ω–¥ –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
this.bot.onText(/\/test$/, this.handleTest.bind(this));
this.bot.onText(/\/nextday$/, this.handleNextDay.bind(this));
this.bot.onText(/\/pause$/, this.handlePause.bind(this));
this.bot.onText(/\/resume$/, this.handleResume.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    this.bot.onText(/^üå± –°—Ç–∞—Ä—Ç$/, this.commandHandlers.handleStart.bind(this.commandHandlers));
    this.bot.onText(/^üå± –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$/, this.handleRestart.bind(this));
    this.bot.onText(/^üìã –ü–æ–º–æ—â—å$/, this.commandHandlers.handleHelp.bind(this.commandHandlers));
    this.bot.onText(/^‚è∏Ô∏è –ü–∞—É–∑–∞$/, this.handlePause.bind(this));
    this.bot.onText(/^‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$/, this.handleResume.bind(this));
    this.bot.onText(/^üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å$/, this.commandHandlers.handleProgress.bind(this.commandHandlers));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.commandHandlers.handleCallback.bind(this.commandHandlers));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞', error);
    });

    this.bot.on('polling_error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ polling', error);
    });

    this.bot.on('webhook_error', (error) => {
      logger.error('–û—à–∏–±–∫–∞ webhook', error);
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      logger.error('Unhandled Rejection', reason);
    });

    process.on('uncaughtException', (error) => {
      logger.error('Uncaught Exception', error);
      setTimeout(() => {
        process.exit(1);
      }, 1000);
    });
  }

  // ‚úÖ === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –° –ê–ù–¢–ò–î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï–ú ===
  private setupReminders(): void {
    cron.schedule('0 9 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      await this.sendMorningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 13 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...');
      await this.sendExerciseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 16 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑ –¥–Ω—è...');
      await this.sendPhraseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 20 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π...');
      await this.sendEveningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    console.log('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:');
    console.log('   üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');  
    console.log('   üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–Ω—è');
    console.log('   üíù 16:00 - –§—Ä–∞–∑—ã –¥–Ω—è');
    console.log('   üåô 20:00 - –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏');
  }

  // ‚úÖ –£–¢–†–ï–ù–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø —Å –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async sendMorningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É—Ç—Ä–µ–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) {
            continue;
          }

          const currentDay = user.current_day || 1;
          
          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–ï –û–¢–ü–†–ê–í–õ–Ø–õ–ò –õ–ò –£–ñ–ï –°–ï–ì–û–î–ù–Ø
          const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'morning');
          if (alreadySent) {
            console.log(`‚è© –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
            continue;
          }

          const dayContent = getDayContent(currentDay);
          if (!dayContent) {
            console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è ${currentDay} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            continue;
          }

          // ‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú –¢–û–õ–¨–ö–û –¢–ï–ö–°–¢ –£–¢–†–û–ú, –ë–ï–ó –ö–ù–û–ü–û–ö
          await this.bot.sendMessage(user.telegram_id, dayContent.morningMessage);

          // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£ –î–õ–Ø –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ï–ô
          await this.database.logReminderSent(user.id, currentDay, 'morning');

          console.log(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendMorningMessages:', error);
    }
  }

  // ‚úÖ –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø —Å –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async sendExerciseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π`);

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          
          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–ï –û–¢–ü–†–ê–í–õ–Ø–õ–ò –õ–ò –£–ñ–ï –°–ï–ì–û–î–ù–Ø
          const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'exercise');
          if (alreadySent) {
            console.log(`‚è© –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
            continue;
          }

          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.exerciseMessage, {
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
                { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
                { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
              ]]
            }
          });

          // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£
          await this.database.logReminderSent(user.id, currentDay, 'exercise');

          console.log(`‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendExerciseMessages:', error);
    }
  }

  // ‚úÖ –§–†–ê–ó–´ –î–ù–Ø —Å –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async sendPhraseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ñ—Ä–∞–∑ –¥–Ω—è`);

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          
          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–ï –û–¢–ü–†–ê–í–õ–Ø–õ–ò –õ–ò –£–ñ–ï –°–ï–ì–û–î–ù–Ø
          const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'phrase');
          if (alreadySent) {
            console.log(`‚è© –§—Ä–∞–∑–∞ –¥–Ω—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
            continue;
          }

          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.phraseOfDay, {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_resonates` },
                { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
                { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_difficult` }
              ]]
            }
          });

          // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£
          await this.database.logReminderSent(user.id, currentDay, 'phrase');

          console.log(`‚úÖ –§—Ä–∞–∑–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –¥–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPhraseMessages:', error);
    }
  }

  // ‚úÖ –í–ï–ß–ï–†–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø —Å –∞–Ω—Ç–∏–¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  private async sendEveningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          
          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–ï –û–¢–ü–†–ê–í–õ–Ø–õ–ò –õ–ò –£–ñ–ï –°–ï–ì–û–î–ù–Ø
          const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'evening');
          if (alreadySent) {
            console.log(`‚è© –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
            continue;
          }

          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.eveningMessage, {
            reply_markup: dayContent.options ? {
              // ‚úÖ –ö–ù–û–ü–ö–ò –í–ï–ß–ï–†–û–ú –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û (–∫–∞–∂–¥–∞—è –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–æ–∫–µ)
              inline_keyboard: dayContent.options.map((option, index) => [{
                text: option.text,
                callback_data: `day_${currentDay}_evening_${index}`
              }])
            } : undefined
          });

          // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –û–¢–ü–†–ê–í–ö–£
          await this.database.logReminderSent(user.id, currentDay, 'evening');

          // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú, –ù–£–ñ–ù–û –õ–ò –ü–ï–†–ï–í–ï–°–¢–ò –ù–ê –°–õ–ï–î–£–Æ–©–ò–ô –î–ï–ù–¨
          const shouldAdvance = await this.database.shouldAdvanceUserDay(user.id, currentDay);
          if (shouldAdvance && currentDay < 7) {
            await this.database.updateUserDay(user.telegram_id, currentDay + 1);
            console.log(`üìÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –¥–µ–Ω—å ${currentDay + 1}`);
          }

          console.log(`‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendEveningMessages:', error);
    }
  }

  // ‚úÖ === –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /test - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –¥–Ω—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
  private async handleTest(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    
    if (!telegramId) return;

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /start');
        return;
      }

      const currentDay = user.current_day || 1;
      const dayContent = getDayContent(currentDay);
      
      if (!dayContent) {
        await this.bot.sendMessage(chatId, '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
      }

      // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í–°–ï 4 –°–û–û–ë–©–ï–ù–ò–Ø –î–ù–Ø –° –ò–ù–¢–ï–†–í–ê–õ–ê–ú–ò

      // 1. –£–¢–†–ï–ù–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï
      await this.bot.sendMessage(chatId, `üß™ –¢–ï–°–¢: –î–µ–Ω—å ${currentDay} - –í–°–ï –°–û–û–ë–©–ï–ù–ò–Ø\n\n=== 09:00 –£–¢–†–û ===`);
      await this.bot.sendMessage(chatId, dayContent.morningMessage);

      // 2. –£–ü–†–ê–ñ–ù–ï–ù–ò–ï (—á–µ—Ä–µ–∑ 3 —Å–µ–∫)
      setTimeout(async () => {
        try {
          await this.bot.sendMessage(chatId, `=== 13:00 –£–ü–†–ê–ñ–ù–ï–ù–ò–ï ===`);
          await this.bot.sendMessage(chatId, dayContent.exerciseMessage, {
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
                { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
                { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
              ]]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', error);
        }
      }, 3000);

      // 3. –§–†–ê–ó–ê –î–ù–Ø (—á–µ—Ä–µ–∑ 6 —Å–µ–∫)
      setTimeout(async () => {
        try {
          await this.bot.sendMessage(chatId, `=== 16:00 –§–†–ê–ó–ê –î–ù–Ø ===`);
          await this.bot.sendMessage(chatId, dayContent.phraseOfDay, {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_resonates` },
                { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
                { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_difficult` }
              ]]
            }
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –¥–Ω—è:', error);
        }
      }, 6000);

      // 4. –í–ï–ß–ï–†–ù–ï–ï –°–û–û–ë–©–ï–ù–ò–ï (—á–µ—Ä–µ–∑ 9 —Å–µ–∫)
      setTimeout(async () => {
        try {
          await this.bot.sendMessage(chatId, `=== 20:00 –í–ï–ß–ï–†–ù–Ø–Ø –†–ï–§–õ–ï–ö–°–ò–Ø ===`);
          await this.bot.sendMessage(chatId, dayContent.eveningMessage, {
            reply_markup: dayContent.options ? {
              inline_keyboard: dayContent.options.map((option, index) => [{
                text: option.text,
                callback_data: `day_${currentDay}_evening_${index}`
              }])
            } : undefined
          });
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }
      }, 9000);

      // 5. –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–°–¢–ê (—á–µ—Ä–µ–∑ 12 —Å–µ–∫)
      setTimeout(async () => {
        try {
          await this.bot.sendMessage(chatId, 
            `‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!\n\n` +
            `–¢—ã –ø–æ–ª—É—á–∏–ª–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–Ω—è ${currentDay}.\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n` +
            `‚Ä¢ /nextday - –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω—é ${currentDay + 1}\n` +
            `‚Ä¢ /test - –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è`
          );
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞:', error);
        }
      }, 12000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTest:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    }
  }

  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–º–∞–Ω–¥–∞ /nextday
  private async handleNextDay(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;

    if (!telegramId) return;

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /start');
        return;
      }

      const currentDay = user.current_day || 1;
      const nextDay = currentDay + 1;

      if (nextDay > 7) {
        await this.database.markCourseCompleted(telegramId);
        await this.bot.sendMessage(chatId, 'üéâ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n\n–ò—Å–ø–æ–ª—å–∑—É–π /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫—É—Ä—Å–∞.');
        return;
      }

      // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
      await this.database.markDayCompleted(user.id, currentDay);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
      await this.database.updateUserDay(telegramId, nextDay);
      
      const nextDayContent = getDayContent(nextDay);
      const dayTitle = nextDayContent ? nextDayContent.title : `–î–µ–Ω—å ${nextDay}`;
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ–Ω—å ${nextDay}!\n\n` +
        `üìã –¢–µ–º–∞: "${dayTitle}"\n\n` +
        `–¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ /test –ø–æ–∫–∞–∂–µ—Ç –¥–µ–Ω—å ${nextDay}.\n\n` +
        `üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n` +
        `‚Ä¢ /test - —Ç–µ—Å—Ç –¥–Ω—è ${nextDay}\n` +
       `‚Ä¢ /nextday - –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–Ω—é ${nextDay + 1 <= 7 ? nextDay + 1 : '–∑–∞–≤–µ—Ä—à–∏—Ç—å –∫—É—Ä—Å'}`
      );

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleNextDay:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é');
    }
  }

  // ‚úÖ === –ö–û–ú–ê–ù–î–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–ù–¢–ò–î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ===

  private async handleTestReminder(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /start');
        return;
      }

      const currentDay = user.current_day || 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
      const morningAlreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'morning');
      
      await this.bot.sendMessage(chatId, 
        `üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ê–ù–¢–ò–î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø\n\n` +
        `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.telegram_id}\n` +
        `üìÖ –î–µ–Ω—å: ${currentDay}\n` +
        `üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è: ${morningAlreadySent ? '‚úÖ –£–ñ–ï –û–¢–ü–†–ê–í–õ–ï–ù–û' : '‚ùå –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û'}\n\n` +
        `–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...`
      );

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const dayContent = getDayContent(currentDay);
      if (dayContent) {
        await this.bot.sendMessage(chatId, `üß™ –¢–ï–°–¢: ${dayContent.morningMessage}`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
        await this.database.logReminderSent(user.id, currentDay, 'morning');
        
        await this.bot.sendMessage(chatId, 
          `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ!\n\n` +
          `–¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /testreminder –µ—â–µ —Ä–∞–∑ - –¥–æ–ª–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å "–£–ñ–ï –û–¢–ü–†–ê–í–õ–ï–ù–û"`
        );
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTestReminder:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
    }
  }

  private async handleClearLogs(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      // –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const query = `DELETE FROM reminder_log WHERE sent_date = CURRENT_DATE`;
      await this.database.pool.query(query);
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –õ–æ–≥–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –æ—á–∏—â–µ–Ω—ã!\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ.\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π /testreminder –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.`
      );
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleClearLogs:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ª–æ–≥–æ–≤');
    }
  }

  private async handleCheckLogs(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) {
      await this.bot.sendMessage(chatId, '‚ùå –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const query = `
        SELECT 
          rl.user_id,
          u.telegram_id,
          u.name,
          rl.day,
          rl.reminder_type,
          rl.sent_at
        FROM reminder_log rl
        JOIN users u ON rl.user_id = u.id
        WHERE rl.sent_date = CURRENT_DATE
        ORDER BY rl.sent_at DESC
        LIMIT 20
      `;
      
      const result = await this.database.pool.query(query);
      const logs = result.rows;
      
      if (logs.length === 0) {
        await this.bot.sendMessage(chatId, 'üìã –°–µ–≥–æ–¥–Ω—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å');
        return;
      }
      
      let logText = `üìã –õ–û–ì–ò –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –ó–ê –°–ï–ì–û–î–ù–Ø (${logs.length}):\n\n`;
      
      logs.forEach((log, index) => {
        const time = new Date(log.sent_at).toLocaleTimeString('ru-RU', { 
          hour: '2-digit', 
          minute: '2-digit' 
        });
        
        logText += `${index + 1}. ${time} | ${log.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} (${log.telegram_id})\n`;
        logText += `   –î–µ–Ω—å ${log.day} | –¢–∏–ø: ${log.reminder_type}\n\n`;
      });
      
      await this.bot.sendMessage(chatId, logText);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleCheckLogs:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤');
    }
  }

  // === –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ===

  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\nüö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: 112\n\n–¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day || 1, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleText', error);
    }
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.pauseUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ üíô', {
        reply_markup: this.keyboardManager.getMainKeyboard(user)
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handlePause', error);
    }
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.resumeUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±', {
        reply_markup: this.keyboardManager.getMainKeyboard(user)
      });
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleResume', error);
    }
  }

  private async handleRestart(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const chatId = msg.chat.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      await this.database.resetUserProgress(telegramId);
      await this.database.updateUserDay(telegramId, 1);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(chatId, 
        `üéâ –û—Ç–ª–∏—á–Ω–æ${name ? `, ${name}` : ''}! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ!\n\n–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 —É—Ç—Ä–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω–æ–≤–æ? üíô`, {
        reply_markup: this.keyboardManager.getMainKeyboard(user)
      });
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –≤ handleRestart', error);
    }
  }

  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) return;

    try {
      const stats = await this.database.getStats();
      const statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –í—Å–µ–≥–æ: ${stats.totalUsers}\nüìà –°–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\nüéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completedCourse}`;
      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;