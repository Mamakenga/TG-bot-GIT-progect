console.log('üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');

import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import cors from 'cors';
import cron from 'node-cron';
import { config } from './config';
import { Database, DbUser } from './database';
import { courseContent, getDayContent } from './course-logic';
import { checkForAlerts, sendAlert } from './utils';
import { ReminderType } from './types';

class SelfCareBot {
  private bot: TelegramBot;
  private app: express.Application;
  private database: Database;

  constructor() {
    this.bot = new TelegramBot(config.telegram.token, { 
      polling: false,
      webHook: false
    });
    
    this.app = express();
    this.database = new Database();
    
    this.setupMiddleware();
    this.setupHandlers();
    this.setupAdminRoutes();
    this.setupReminders();
  }

  private setupMiddleware(): void {
    this.app.use(cors());
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.static('public'));
    
    this.app.use((req, res, next) => {
      req.setTimeout(25000);
      next();
    });
  }

  async init(): Promise<void> {
    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      await this.database.init();
      
      const PORT = Number(process.env.PORT) || 3000;
      
      console.log('üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...');
      this.app.listen(PORT, () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
        console.log(`ü§ñ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω`);
        console.log(`üìä –î–∞—à–±–æ—Ä–¥: ${process.env.DASHBOARD_URL || 'http://localhost:3000'}/dashboard`);
        
        if (process.env.NODE_ENV === 'production') {
          console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...');
          this.setupWebhook();
        } else {
          console.log('üîß –ó–∞–ø—É—Å–∫ polling...');
          this.bot.startPolling();
          console.log('üîÑ Polling —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω');
        }
      });

      // Graceful shutdown
      const shutdown = async (signal: string) => {
        console.log(`üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
        try {
          await this.database.close();
          console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
          process.exit(0);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏:', error);
          process.exit(1);
        }
      };

      process.on('SIGTERM', () => shutdown('SIGTERM'));
      process.on('SIGINT', () => shutdown('SIGINT'));

    } catch (error) {
      console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      process.exit(1);
    }
  }

  private setupWebhook(): void {
    const url = process.env.DASHBOARD_URL || 'https://tg-bot-git-progect-production.up.railway.app';
    const webhookUrl = `${url}/bot${config.telegram.token}`;
    
    this.bot.setWebHook(webhookUrl).then(() => {
      console.log(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
    }).catch((error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error);
    });
  }

  private setupHandlers(): void {
    // Webhook endpoint –¥–ª—è Telegram
    this.app.post(`/bot${config.telegram.token}`, async (req, res) => {
      try {
        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram');
        await this.bot.processUpdate(req.body);
        res.status(200).json({ ok: true });
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook:', error);
        res.status(200).json({ ok: false, error: 'Internal error' });
      }
    });

    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    this.bot.onText(/\/test/, this.handleTest.bind(this));
    this.bot.onText(/\/pause/, this.handlePause.bind(this));
    this.bot.onText(/\/resume/, this.handleResume.bind(this));
    this.bot.onText(/\/menu/, this.handleMenu.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    this.bot.onText(/^üå± –°—Ç–∞—Ä—Ç$/, this.handleStart.bind(this));
    this.bot.onText(/^üå± –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ$/, this.handleRestart.bind(this));
    this.bot.onText(/^üìã –ü–æ–º–æ—â—å$/, this.handleHelp.bind(this));
    this.bot.onText(/^‚è∏Ô∏è –ü–∞—É–∑–∞$/, this.handlePause.bind(this));
    this.bot.onText(/^‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å$/, this.handleResume.bind(this));
    this.bot.onText(/^üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å$/, this.handleProgress.bind(this));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.handleCallback.bind(this));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error.message);
    });

    this.bot.on('polling_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
    });

    this.bot.on('webhook_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ webhook:', error.message);
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection:', reason);
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error.message);
      setTimeout(() => {
        process.exit(1);
      }, 1000);
    });
  }

  // === –ú–ï–¢–û–î –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø CSV ===
  private createCSV(data: any[], headers: string[]): string {
    let csv = headers.join(',') + '\n';
    
    for (const row of data) {
      const values = headers.map(header => {
        const value = row[header] || '';
        if (typeof value === 'string' && (value.includes(',') || value.includes('"') || value.includes('\n'))) {
          return `"${value.replace(/"/g, '""')}"`;
        }
        return value;
      });
      csv += values.join(',') + '\n';
    }
    
    return csv;
  }

  // === –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===
  private setupReminders(): void {
    cron.schedule('0 9 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
      await this.sendMorningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 13 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–Ω–µ–≤–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...');
      await this.sendExerciseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 16 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–∞–∑ –¥–Ω—è...');
      await this.sendPhraseMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    cron.schedule('0 20 * * *', async () => {
      console.log('‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö —Ä–µ—Ñ–ª–µ–∫—Å–∏–π...');
      await this.sendEveningMessages();
    }, {
      timezone: "Europe/Moscow"
    });

    console.log('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:');
    console.log('   üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è');  
    console.log('   üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–Ω—è');
    console.log('   üíù 16:00 - –§—Ä–∞–∑—ã –¥–Ω—è');
    console.log('   üåô 20:00 - –í–µ—á–µ—Ä–Ω–∏–µ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏');
  }

  private async sendMorningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${activeUsers.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) {
            continue;
          }

          const currentDay = user.current_day || 1;
          const dayContent = getDayContent(currentDay);
          if (!dayContent) {
            console.log(`‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–Ω—è ${currentDay} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            continue;
          }

          await this.bot.sendMessage(user.telegram_id, dayContent.morningMessage, {
            reply_markup: dayContent.options ? {
              inline_keyboard: [
                dayContent.options.map((option, index) => ({
                  text: option.text,
                  callback_data: `day_${currentDay}_morning_${index}`
                }))
              ]
            } : undefined
          });

          console.log(`‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendMorningMessages:', error);
    }
  }

  private async sendExerciseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.exerciseMessage, {
            reply_markup: {
              inline_keyboard: [[
                { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
                { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
                { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
              ]]
            }
          });

          console.log(`‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendExerciseMessages:', error);
    }
  }

  private async sendPhraseMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.phraseOfDay, {
            reply_markup: {
              inline_keyboard: [[
                { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_good` },
                { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
                { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_hard` }
              ]]
            }
          });

          console.log(`‚úÖ –§—Ä–∞–∑–∞ –¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPhraseMessages:', error);
    }
  }

  private async sendEveningMessages(): Promise<void> {
    try {
      const activeUsers = await this.database.getActiveUsers();

      for (const user of activeUsers) {
        try {
          if (user.course_completed || (user.current_day || 1) > 7) continue;

          const currentDay = user.current_day || 1;
          const dayContent = getDayContent(currentDay);
          if (!dayContent) continue;

          await this.bot.sendMessage(user.telegram_id, dayContent.eveningMessage, {
            reply_markup: dayContent.options ? {
              inline_keyboard: dayContent.options.map((option, index) => [{
  text: option.text,
  callback_data: `day_${currentDay}_morning_${index}`
}])
            } : undefined
          });

          console.log(`‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id} (–¥–µ–Ω—å ${currentDay})`);
          await new Promise(resolve => setTimeout(resolve, 100));

        } catch (userError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–µ—á–µ—Ä–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, userError);
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendEveningMessages:', error);
    }
  }

  // === –ê–î–ú–ò–ù –†–û–£–¢–´ ===
  private setupAdminRoutes(): void {
    const authenticate = (req: express.Request, res: express.Response, next: express.NextFunction) => {
      const auth = req.headers.authorization;
      if (!auth) {
        res.setHeader('WWW-Authenticate', 'Basic realm="Admin Dashboard"');
        return res.status(401).send('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
      const credentials = Buffer.from(auth.split(' ')[1], 'base64').toString().split(':');
      if (credentials[0] === 'admin' && credentials[1] === config.security.adminPassword) {
        next();
      } else {
        res.status(401).send('–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
    };

    // –ö–†–ê–°–ò–í–´–ô –î–ê–®–ë–û–†–î
    this.app.get('/dashboard', authenticate, async (req, res) => {
      try {
        const stats = await this.database.getStats();
        const alerts = await this.database.getAlerts();
        const unhandledAlerts = alerts.filter((alert: any) => !alert.handled).length;
        
        const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: #333;
            line-height: 1.6;
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1200px; 
            margin: 0 auto;
        }
        .header {
            background: rgba(255, 255, 255, 0.95);
            color: #667eea;
            padding: 30px;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        .stat-card:hover {
            transform: translateY(-5px);
        }
        .stat-card h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.2em;
        }
        .big-number {
            font-size: 3em;
            font-weight: bold;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            margin: 15px 0;
        }
        .actions-card {
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .action-btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            text-decoration: none;
            display: inline-block;
            margin: 8px 8px 8px 0;
            transition: all 0.3s ease;
        }
        .action-btn:hover { 
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        }
        .alert-badge {
            background: #ff6b6b;
            color: white;
            border-radius: 50%;
            padding: 4px 8px;
            font-size: 0.8em;
            margin-left: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üìä –î–∞—à–±–æ—Ä–¥ –±–æ—Ç–∞ "–ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ"</h1>
            <p>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º —Å–∞–º–æ—Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è</p>
        </div>

        <div class="stats-grid">
            <div class="stat-card">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                <div class="big-number">${stats.totalUsers}</div>
                <p>–í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ</p>
            </div>
            
            <div class="stat-card">
                <h3>üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è</h3>
                <div class="big-number">${stats.activeToday}</div>
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
            </div>
            
            <div class="stat-card">
                <h3>üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å</h3>
                <div class="big-number">${stats.completedCourse}</div>
                <p>–ü—Ä–æ—à–ª–∏ –≤—Å–µ 7 –¥–Ω–µ–π</p>
            </div>

            <div class="stat-card">
                <h3>üö® –ê–ª–µ—Ä—Ç—ã ${unhandledAlerts > 0 ? `<span class="alert-badge">${unhandledAlerts}</span>` : ''}</h3>
                <div class="big-number">${alerts.length}</div>
                <p>–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
            </div>
        </div>

        <div class="actions-card">
            <h3>üì§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
            <p>–≠–∫—Å–ø–æ—Ä—Ç –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</p>
            <div style="margin-top: 15px;">
                <a href="/dashboard/export/responses" class="action-btn">üìÑ –û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
                <a href="/dashboard/export/users" class="action-btn">üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (CSV)</a>
            </div>
        </div>

        <div style="text-align: center; color: rgba(255, 255, 255, 0.8); margin-top: 30px;">
            <p>üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date().toLocaleString('ru-RU')}</p>
        </div>
    </div>
</body>
</html>`;
        res.send(html);
      } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞: ${error}`);
      }
    });

    // –≠–ö–°–ü–û–†–¢ CSV
    this.app.get('/dashboard/export/responses', authenticate, async (req, res) => {
      try {
        const responses = await this.database.getAllResponses();
        const csv = this.createCSV(responses, ['–ò–º—è', 'Telegram ID', '–î–µ–Ω—å', '–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞', '–û—Ç–≤–µ—Ç', '–î–∞—Ç–∞']);
        
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', 'attachment; filename=user-responses.csv');
        res.send('\ufeff' + csv);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
      }
    });

    this.app.get('/dashboard/export/users', authenticate, async (req, res) => {
      try {
        const users = await this.database.getAllUsers();
        const csv = this.createCSV(users, ['–ò–º—è', 'Telegram ID', '–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å', '–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏']);
        
        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', 'attachment; filename=users.csv');
        res.send('\ufeff' + csv);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ' + error);
      }
    });

    this.app.get('/', (req, res) => res.redirect('/dashboard'));
  }

  // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===
  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} (${name}) –∑–∞–ø—É—Å—Ç–∏–ª —Å—Ç–∞—Ä—Ç`);
      
      await this.database.createUser(telegramId, name);
      const user = await this.database.getUser(telegramId);
      
      const keyboard = this.getMainKeyboard(user);
      
      if (user?.course_completed) {
        await this.bot.sendMessage(chatId, 
          `üéâ –ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! 

–¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ! 
–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —ç—Ç–∏–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º! üíô

–ú–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏.`, {
          reply_markup: keyboard
        });
      } else if (user && user.current_day > 1) {
        await this.bot.sendMessage(chatId, 
          `üå∏ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º${name ? `, ${name}` : ''}!

–¢—ã —Å–µ–π—á–∞—Å –Ω–∞ ${user.current_day} –¥–Ω–µ –∫—É—Ä—Å–∞ –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.
–ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? üíô`, {
          reply_markup: keyboard
        });
      } else {
        await this.bot.sendMessage(chatId, 
          `üå∏ –ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ.

–ó–∞ 7 –¥–Ω–µ–π –º—ã –º—è–≥–∫–æ –∏—Å—Å–ª–µ–¥—É–µ–º, –∫–∞–∫ –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ.

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ?`, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üå± –î–∞, –≥–æ—Ç–æ–≤–∞', callback_data: 'start_yes' },
              { text: '‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'more_info' },
              { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
            ]]
          }
        });
        
        // –£–±–∏—Ä–∞–µ–º setTimeout –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ inline –∫–Ω–æ–ø–æ–∫
await this.bot.sendMessage(chatId, '–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:', {
  reply_markup: this.getMainKeyboard(user)
});
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleStart:`, error);
      try {
        await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', {
          reply_markup: this.getMainKeyboard(null)
        });
      } catch {}
    }
  }

  private getMainKeyboard(user: DbUser | null): any {
    if (!user) {
      return {
        keyboard: [
          ['üå± –°—Ç–∞—Ä—Ç', 'üìã –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true,
        persistent: true,
        one_time_keyboard: false 
      };
    }

    if (user.course_completed) {
      return {
        keyboard: [
          ['üå± –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
          ['üìã –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true,
        persistent: true
      };
    }

    const isPaused = Boolean(user.is_paused);
    
    if (isPaused) {
      return {
        keyboard: [
          ['‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å'],
          ['üìã –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true,
        persistent: true
      };
    }

    return {
      keyboard: [
        ['üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', '‚è∏Ô∏è –ü–∞—É–∑–∞'],
        ['üìã –ü–æ–º–æ—â—å']
      ],
      resize_keyboard: true,
      persistent: true
    };
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = callbackQuery.message?.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!chatId || !data) return;

    try {
      await this.bot.answerCallbackQuery(callbackQuery.id);

      if (data === 'start_yes') {
        await this.database.updateUserDay(telegramId, 1);
        const user = await this.database.getUser(telegramId);
        
        await this.bot.sendMessage(chatId, 
          `üéâ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å!\n\n` +
          `–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 —É—Ç—Ä–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n` +
          `–ó–∞ –¥–µ–Ω—å –±—É–¥–µ—Ç 4 —Å–æ–æ–±—â–µ–Ω–∏—è:\n` +
          `üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n` +
          `üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è\n` +
          `üíù 16:00 - –§—Ä–∞–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è\n` +
          `üåô 20:00 - –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è\n\n` +
          `–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞? üíô`, {
          reply_markup: this.getMainKeyboard(user)
        });
      } else if (data === 'more_info') {
        const infoText = `üìö –ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –¥–Ω–µ–π:\n\n` +
          courseContent.map((day, index) => `üìÖ –î–µ–Ω—å ${index + 1}: ${day.title}`).join('\n') +
          `\n\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å - 4 –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?`;

        await this.bot.sendMessage(chatId, infoText, {
          reply_markup: {
            inline_keyboard: [[
              { text: 'üå± –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!', callback_data: 'start_yes' },
              { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
            ]]
          }
        });
      } else if (data === 'later') {
        const user = await this.database.getUser(telegramId);
        await this.bot.sendMessage(chatId, '–ü–æ–Ω–∏–º–∞—é ü§ó –ù–∞–ø–∏—à–∏ "–°—Ç–∞—Ä—Ç" –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.', {
          reply_markup: this.getMainKeyboard(user)
        });
      }

      if (data.startsWith('day_')) {
        await this.handleDayCallback(chatId, telegramId, data);
      }

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleCallback:`, error);
    }
  }

  private async handleDayCallback(chatId: number, telegramId: number, data: string): Promise<void> {
    try {
      const user = await this.database.getUser(telegramId);
      if (!user) return;

      const currentDay = user.current_day || 1;

      await this.database.saveResponse(user.id, currentDay, 'button_choice', data);

      const responses = [
        '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç! üíô',
        '–í–∞–∂–Ω–æ, —á—Ç–æ —Ç—ã –æ—Ç–∫–ª–∏–∫–∞–µ—à—å—Å—è üå∏', 
        '–¢–≤–æ—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å —Ü–µ–Ω–Ω–∞ üíô',
        '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ —É—á–∞—Å—Ç–∏–µ ü§ó'
      ];
      const randomResponse = responses[Math.floor(Math.random() * responses.length)];
      
      await this.bot.sendMessage(chatId, randomResponse, {
        reply_markup: this.getMainKeyboard(user)
      });

      if (data.includes('_evening_')) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –¥–µ–Ω—å
  const dayCompleted = await this.database.isDayCompleted(user.id, currentDay);
  
  if (!dayCompleted) {
    const nextDay = currentDay + 1;
    if (nextDay <= 7) {
      await this.database.updateUserDay(telegramId, nextDay);
      await this.database.markDayCompleted(user.id, currentDay);
    } else {
      await this.database.markCourseCompleted(telegramId);
      const completedUser = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(chatId, 
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ!\n\n` +
        `–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üíô`, {
        reply_markup: this.getMainKeyboard(completedUser)
      });
    }
  }
}

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleDayCallback:', error);
    }
  }

  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122\n` +
            `üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å: 112\n\n–¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleText:', error);
    }
  }

  private async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    const user = telegramId ? await this.database.getUser(telegramId) : null;
    
    const helpText = `üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n` +
      `üå∏ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:\n‚Ä¢ –°—Ç–∞—Ä—Ç - –ù–∞—á–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫—É—Ä—Å\n‚Ä¢ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n‚Ä¢ –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–º\n\n` +
      `üíô –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ\n4 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–µ–Ω—å (9:00, 13:00, 16:00, 20:00)\n\n` +
      `üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞: help@harmony4soul.com`;
    
    await this.bot.sendMessage(msg.chat.id, helpText, {
      reply_markup: this.getMainKeyboard(user)
    });
  }

  private async handleProgress(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.bot.sendMessage(msg.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞. –ù–∞–∂–º–∏ "–°—Ç–∞—Ä—Ç" üå±', {
          reply_markup: this.getMainKeyboard(null)
        });
        return;
      }

      let progressText = `üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n\n`;
      
      if (user.course_completed) {
        progressText += `üéâ –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø—Ä–æ—à–ª–∞ –≤—Å–µ 7 –¥–Ω–µ–π –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ.\n\n`;
        progressText += `üíô –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å:\n`;
        progressText += `‚Ä¢ –ó–∞–º–µ—á–∞–π —Å–≤–æ–∏ —ç–º–æ—Ü–∏–∏\n‚Ä¢ –ì–æ–≤–æ—Ä–∏ —Å–µ–±–µ –¥–æ–±—Ä—ã–µ —Å–ª–æ–≤–∞\n‚Ä¢ –ó–∞–±–æ—Ç—å—Å—è –æ —Å–≤–æ–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è—Ö\n‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–π —Å–≤–æ—é —É—è–∑–≤–∏–º–æ—Å—Ç—å`;
      } else if (Boolean(user.is_paused)) {
        progressText += `‚è∏Ô∏è –ö—É—Ä—Å –Ω–∞ –ø–∞—É–∑–µ\n`;
        progressText += `üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${user.current_day || 1} –∏–∑ 7\n\n`;
        progressText += `–ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞! üíô`;
      } else {
        const currentDay = user.current_day || 1;
        const isPaused = Boolean(user.is_paused);
        
        progressText += `üìÖ –î–µ–Ω—å: ${currentDay} –∏–∑ 7\n`;
        progressText += `üå± –°—Ç–∞—Ç—É—Å: ${isPaused ? '–ù–∞ –ø–∞—É–∑–µ' : '–ê–∫—Ç–∏–≤–µ–Ω'}\n\n`;
        
        if (currentDay === 1) {
          progressText += `–°–µ–≥–æ–¥–Ω—è: –û—Å–æ–∑–Ω–∞–Ω–∏–µ –±–æ–ª–∏\n–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–Ω—è.`;
        } else {
          const dayContent = getDayContent(currentDay);
          if (dayContent) {
            progressText += `–°–µ–≥–æ–¥–Ω—è: ${dayContent.title}\n`;
            progressText += `–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–¥–µ—Ç —Ç–µ–±—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üïê`;
          }
        }
      }

      const currentDay = user.current_day || 1;
      const completionPercentage = user.course_completed ? 100 : Math.round(((currentDay - 1) / 7) * 100);
      progressText += `\n\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${completionPercentage}%`;
      progressText += `\n${'‚ñì'.repeat(Math.floor(completionPercentage / 10))}${'‚ñë'.repeat(10 - Math.floor(completionPercentage / 10))}`;

      await this.bot.sendMessage(msg.chat.id, progressText, {
        reply_markup: this.getMainKeyboard(user)
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleProgress:', error);
      await this.bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.');
    }
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.pauseUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ üíô', {
        reply_markup: this.getMainKeyboard(user)
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handlePause:', error);
    }
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId) return;

    try {
      await this.database.resumeUser(telegramId);
      const user = await this.database.getUser(telegramId);
      
      await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±', {
        reply_markup: this.getMainKeyboard(user)
      });
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleResume:', error);
    }
  }
private async handleRestart(msg: TelegramBot.Message): Promise<void> {
  const telegramId = msg.from?.id;
  const chatId = msg.chat.id;
  const name = msg.from?.first_name;

  if (!telegramId) return;

  try {
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∫—É—Ä—Å`);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    await this.database.resetUserProgress(telegramId);
    await this.database.updateUserDay(telegramId, 1);
    const user = await this.database.getUser(telegramId);
    
    await this.bot.sendMessage(chatId, 
      `üéâ –û—Ç–ª–∏—á–Ω–æ${name ? `, ${name}` : ''}! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å –∑–∞–Ω–æ–≤–æ!\n\n` +
      `–ó–∞–≤—Ç—Ä–∞ –≤ 9:00 —É—Ç—Ä–∞ —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n` +
      `–ó–∞ –¥–µ–Ω—å –±—É–¥–µ—Ç 4 —Å–æ–æ–±—â–µ–Ω–∏—è:\n` +
      `üåÖ 09:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n` +
      `üå∏ 13:00 - –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–Ω—è\n` +
      `üíù 16:00 - –§—Ä–∞–∑–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è\n` +
      `üåô 20:00 - –í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è\n\n` +
      `–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ –∑–∞–Ω–æ–≤–æ? üíô`, {
      reply_markup: this.getMainKeyboard(user)
    });
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ handleRestart:`, error);
    await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –∫—É—Ä—Å–∞.');
  }
}
private async handleTest(msg: TelegramBot.Message): Promise<void> {
  const telegramId = msg.from?.id;
  const chatId = msg.chat.id;

  if (!telegramId) return;

  try {
    const user = await this.database.getUser(telegramId);
    if (!user) {
      await this.bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /start');
      return;
    }

    const currentDay = user.current_day || 1;
    const dayContent = getDayContent(currentDay);
    
    if (!dayContent) {
      await this.bot.sendMessage(chatId, '–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    await this.bot.sendMessage(chatId, `üß™ –¢–ï–°–¢: –î–µ–Ω—å ${currentDay}\n\n=== –£–¢–†–û ===`);
    
    // –£—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await this.bot.sendMessage(chatId, dayContent.morningMessage, {
      reply_markup: dayContent.options ? {
        inline_keyboard: dayContent.options.map((option, index) => [{
  text: option.text,
  callback_data: `day_${currentDay}_evening_${index}`
}])
      } : undefined
    });

    // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã - —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    setTimeout(async () => {
      await this.bot.sendMessage(chatId, `=== –£–ü–†–ê–ñ–ù–ï–ù–ò–ï ===`);
      await this.bot.sendMessage(chatId, dayContent.exerciseMessage, {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
            { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
            { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
          ]]
        }
      });
    }, 3000);

    // –ß–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥ - —Ñ—Ä–∞–∑–∞ –¥–Ω—è
    setTimeout(async () => {
      await this.bot.sendMessage(chatId, `=== –§–†–ê–ó–ê –î–ù–Ø ===`);
      await this.bot.sendMessage(chatId, dayContent.phraseOfDay, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_good` },
            { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
            { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_hard` }
          ]]
        }
      });
    }, 6000);

    // –ß–µ—Ä–µ–∑ 9 —Å–µ–∫—É–Ω–¥ - –≤–µ—á–µ—Ä
    setTimeout(async () => {
      await this.bot.sendMessage(chatId, `=== –í–ï–ß–ï–† ===`);
      await this.bot.sendMessage(chatId, dayContent.eveningMessage, {
        reply_markup: dayContent.options ? {
          inline_keyboard: [
            dayContent.options.map((option, index) => ({
              text: option.text,
              callback_data: `day_${currentDay}_evening_${index}`
            }))
          ]
        } : undefined
      });
    }, 9000);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleTest:', error);
    await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏');
  }
}
private async handleMenu(msg: TelegramBot.Message): Promise<void> {
  const telegramId = msg.from?.id;
  const chatId = msg.chat.id;

  if (!telegramId) return;

  try {
    const user = await this.database.getUser(telegramId);
    await this.bot.sendMessage(chatId, '–í–æ—Ç —Ç–≤–æ—ë –º–µ–Ω—é:', {
      reply_markup: this.getMainKeyboard(user)
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleMenu:', error);
  }
}
  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) return;

    try {
      const stats = await this.database.getStats();
      const statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
        `üë• –í—Å–µ–≥–æ: ${stats.totalUsers}\nüìà –°–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\nüéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏: ${stats.completedCourse}`;
      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;