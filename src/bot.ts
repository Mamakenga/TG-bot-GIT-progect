console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');

import TelegramBot from 'node-telegram-bot-api';
import express from 'express';
import cron from 'node-cron';
import { config } from './config';
import { Database } from './database';
import { courseContent } from './course-logic';
import { checkForAlerts, sendAlert } from './utils';

class SelfCareBot {
  private bot: TelegramBot;
  private app: express.Application;
  private database: Database;

  constructor() {
    // Webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞, polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    const options = process.env.NODE_ENV === 'production' 
      ? { webHook: { port: Number(process.env.PORT) || 3000 } }
      : { polling: true };
    
    this.bot = new TelegramBot(config.telegram.token, options);
    this.app = express();
    this.database = new Database();
    
    this.setupWebhook();
    this.setupHandlers();
    this.setupReminders();
  }

  private setupWebhook(): void {
    if (process.env.NODE_ENV === 'production') {
      const url = process.env.RAILWAY_PUBLIC_DOMAIN || process.env.VERCEL_URL;
      if (url) {
        this.bot.setWebHook(`https://${url}/bot${config.telegram.token}`);
        console.log(`üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: https://${url}`);
      }
    }
  }

  async init(): Promise<void> {
    await this.database.init();
    
    // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è webhook
    if (process.env.NODE_ENV === 'production') {
      this.app.listen(process.env.PORT || 3000, () => {
        console.log(`üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT || 3000}`);
      });
    }
    
    console.log('ü§ñ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
  }

  private setupHandlers(): void {
    // Webhook endpoint
    this.app.post(`/bot${config.telegram.token}`, (req, res) => {
      this.bot.processUpdate(req.body);
      res.sendStatus(200);
    });

    // –ö–æ–º–∞–Ω–¥—ã
    this.bot.onText(/\/start/, this.handleStart.bind(this));
    this.bot.onText(/\/help/, this.handleHelp.bind(this));
    this.bot.onText(/\/stats/, this.handleStats.bind(this));
    this.bot.onText(/\/pause/, this.handlePause.bind(this));
    this.bot.onText(/\/resume/, this.handleResume.bind(this));

    // Callback –∫–Ω–æ–ø–∫–∏
    this.bot.on('callback_query', this.handleCallback.bind(this));

    // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    this.bot.on('message', this.handleText.bind(this));
  }

  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const name = msg.from?.first_name;

    if (!telegramId) return;

    try {
      await this.database.createUser(telegramId, name);
      
      await this.bot.sendMessage(chatId, 
        `üå∏ –ü—Ä–∏–≤–µ—Ç${name ? `, ${name}` : ''}! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–±–æ—Ç–µ –æ —Å–µ–±–µ.

–ó–∞ 7 –¥–Ω–µ–π –º—ã –º—è–≥–∫–æ –∏—Å—Å–ª–µ–¥—É–µ–º, –∫–∞–∫ –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ. 
–ù–µ —á–µ—Ä–µ–∑ –Ω–∞—Å–∏–ª–∏–µ –∏–ª–∏ –¥–∞–≤–ª–µ–Ω–∏–µ, –∞ —á–µ—Ä–µ–∑ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –∑–∞–±–æ—Ç—É.

–ì–æ—Ç–æ–≤–∞ –Ω–∞—á–∞—Ç—å —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∫ —Å–µ–±–µ?`, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üå± –î–∞, –≥–æ—Ç–æ–≤–∞', callback_data: 'start_yes' },
            { text: '‚ùì –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'more_info' },
            { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
          ]]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleStart:', error);
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  private async handleCallback(callbackQuery: TelegramBot.CallbackQuery): Promise<void> {
    const chatId = callbackQuery.message?.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    if (!chatId || !data) return;

    try {
      const user = await this.database.getUser(telegramId);
      if (!user) {
        await this.handleStart(callbackQuery.message!);
        return;
      }

      await this.bot.answerCallbackQuery(callbackQuery.id);

      switch (data) {
        case 'start_yes':
          await this.startDay1(chatId, telegramId);
          break;
        
        case 'more_info':
          await this.showCourseInfo(chatId);
          break;

        case 'later':
          await this.bot.sendMessage(chatId, '–ü–æ–Ω–∏–º–∞—é ü§ó –ó–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ —Ç—Ä–µ–±—É–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.\n\n–ù–∞–ø–∏—à–∏ /start –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞.');
          break;

        default:
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –¥–Ω–∏ –∫—É—Ä—Å–∞
          if (data.startsWith('day_')) {
            await this.handleDayResponse(chatId, telegramId, data);
          }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleCallback:', error);
    }
  }

  private async startDay1(chatId: number, telegramId: number): Promise<void> {
    const day1 = courseContent[0];
    
    await this.bot.sendMessage(chatId, day1.baseContent, {
      reply_markup: {
        inline_keyboard: [
          day1.options?.map((option: any, index: number) => ({
            text: option.text,
            callback_data: `day_1_${index}`
          })) || []
        ]
      }
    });

    await this.database.updateUserDay(telegramId, 1);
  }

  private async handleDayResponse(chatId: number, telegramId: number, data: string): Promise<void> {
    const [, dayStr, optionStr] = data.split('_');
    const day = parseInt(dayStr);
    const optionIndex = parseInt(optionStr);

    const dayContent = courseContent[day - 1];
    const option = dayContent.options?.[optionIndex];

    if (!option) return;

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    const user = await this.database.getUser(telegramId);
    if (!user) return;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.database.saveResponse(user.id, day, 'button_choice', option.text);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    await this.bot.sendMessage(chatId, option.response);

    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    await this.scheduleNextDay(chatId, telegramId, day);
  }

  private async scheduleNextDay(chatId: number, telegramId: number, currentDay: number): Promise<void> {
    if (currentDay < 7) {
      setTimeout(async () => {
        const nextDay = currentDay + 1;
        const nextDayContent = courseContent[nextDay - 1];
        
        await this.bot.sendMessage(chatId, `üåÖ –î–µ–Ω—å ${nextDay}: ${nextDayContent.title}\n\n${nextDayContent.baseContent}`, {
          reply_markup: {
            inline_keyboard: [
              nextDayContent.options?.map((option: any, index: number) => ({
                text: option.text,
                callback_data: `day_${nextDay}_${index}`
              })) || []
            ]
          }
        });

        await this.database.updateUserDay(telegramId, nextDay);
      }, 60000); // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    } else {
      // –ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω
      await this.bot.sendMessage(chatId, 
        `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ!\n\n` +
        `–≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –¢—ã –ø—Ä–æ–¥–µ–ª–∞–ª–∞ –≤–∞–∂–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ –Ω–∞—É—á–∏–ª–∞—Å—å –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ.\n\n` +
        `–ü–æ–º–Ω–∏: –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ - —ç—Ç–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –±—É–¥—å —Å—á–∞—Å—Ç–ª–∏–≤–∞! üíô`
      );
      
      await this.database.markCourseCompleted(telegramId);
    }
  }

  private async showCourseInfo(chatId: number): Promise<void> {
    const infoText = `üìö –ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –¥–Ω–µ–π:\n\n` +
      courseContent.map((day: any, index: number) => `üìÖ –î–µ–Ω—å ${index + 1}: ${day.title}`).join('\n') +
      `\n\n–ö–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç 5-15 –º–∏–Ω—É—Ç.\n–ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å?`;

    await this.bot.sendMessage(chatId, infoText, {
      reply_markup: {
        inline_keyboard: [[
          { text: 'üå± –î–∞, –Ω–∞—á–∏–Ω–∞–µ–º!', callback_data: 'start_yes' },
          { text: '‚è∞ –ü–æ–∑–∂–µ', callback_data: 'later' }
        ]]
      }
    });
  }

  private async handleText(msg: TelegramBot.Message): Promise<void> {
    if (msg.text?.startsWith('/')) return;

    const chatId = msg.chat.id;
    const telegramId = msg.from?.id;
    const text = msg.text;

    if (!telegramId || !text) return;

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
      const alertFound = await checkForAlerts(text);
      if (alertFound) {
        const user = await this.database.getUser(telegramId);
        if (user) {
          await this.database.createAlert(user.id, alertFound, text);
          await sendAlert(`üö® –ê–õ–ï–†–¢ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name || telegramId}:\n"${text}"`);
          
          await this.bot.sendMessage(chatId, 
            `–Ø –æ—á–µ–Ω—å –æ–±–µ—Å–ø–æ–∫–æ–µ–Ω–∞ —Ç–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ üíô\n–¢–≤–æ—è –∂–∏–∑–Ω—å —Ü–µ–Ω–Ω–∞ –∏ –≤–∞–∂–Ω–∞.\n\n` +
            `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å:\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122 (–∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)\n` +
            `üö® –°–ª—É–∂–±–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –ø–æ–º–æ—â–∏: 112\nüí¨ –°–∞–π—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: www.harmony4soul.com\n\n` +
            `–Ø –æ—Å—Ç–∞—é—Å—å —Å —Ç–æ–±–æ–π. –¢—ã –Ω–µ –æ–¥–Ω–∞.`
          );
          return;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const user = await this.database.getUser(telegramId);
      if (user) {
        await this.database.saveResponse(user.id, user.current_day, 'free_text', text);
        
        const responses = [
          '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å üíô',
          '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ üå∏',
          '–¢–≤–æ–∏ —Å–ª–æ–≤–∞ –≤–∞–∂–Ω—ã –¥–ª—è –º–µ–Ω—è üíô',
          '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∞—Å—å ü§ó'
        ];
        const randomResponse = responses[Math.floor(Math.random() * responses.length)];
        
        await this.bot.sendMessage(chatId, randomResponse);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ handleText:', error);
    }
  }

  private async handleHelp(msg: TelegramBot.Message): Promise<void> {
    const helpText = `üìã –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n` +
      `üå∏ –ö–æ–º–∞–Ω–¥—ã:\n/start - –ù–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∑–∞–Ω–æ–≤–æ\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n` +
      `/pause - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å\n/resume - –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å\n\n` +
      `üíô –û –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n–≠—Ç–æ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n\n` +
      `üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞:\nhelp@harmony4soul.com`;

    await this.bot.sendMessage(msg.chat.id, helpText);
  }

  private async handlePause(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–ø–∏—à–∏ /resume –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å üíô');
  }

  private async handleResume(msg: TelegramBot.Message): Promise<void> {
    await this.bot.sendMessage(msg.chat.id, '–ö—É—Ä—Å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—É—Ç—å –∑–∞–±–æ—Ç—ã –æ —Å–µ–±–µ üå±');
  }

  private async handleStats(msg: TelegramBot.Message): Promise<void> {
    const telegramId = msg.from?.id;
    
    if (!telegramId || telegramId.toString() !== config.telegram.adminId) {
      return;
    }

    try {
      const stats = await this.database.getStats();
      
      let statsText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n`;
      statsText += `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n`;
      statsText += `üìà –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${stats.activeToday}\n`;
      statsText += `üéØ –ó–∞–≤–µ—Ä—à–∏–ª–∏ –∫—É—Ä—Å: ${stats.completedCourse}\n\n`;
      statsText += `üìä –î–∞—à–±–æ—Ä–¥: ${process.env.DASHBOARD_URL}/dashboard\n`;

      await this.bot.sendMessage(msg.chat.id, statsText);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
  }

  private setupReminders(): void {
    // –£—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cron.schedule('0 9 * * *', async () => {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    });

    // –í–µ—á–µ—Ä–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    cron.schedule('0 20 * * *', async () => {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...');
    });
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
const bot = new SelfCareBot();
bot.init().catch(console.error);

export default SelfCareBot;