// scripts/check-progress.js
const fs = require('fs');

function checkRefactoringProgress() {
  console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞...\n');

  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const botFile = 'src/bot.ts';
  if (fs.existsSync(botFile)) {
    const content = fs.readFileSync(botFile, 'utf8');
    const lines = content.split('\n').length;
    const methods = (content.match(/private async \w+/g) || []).length;
    const htmlLines = (content.match(/<!DOCTYPE html>/g) || []).length;
    
    console.log('üìÑ –ê–Ω–∞–ª–∏–∑ bot.ts:');
    console.log(`   –°—Ç—Ä–æ–∫: ${lines} ${lines > 1000 ? '‚ùå (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)' : lines > 500 ? '‚ö†Ô∏è (–º–Ω–æ–≥–æ)' : '‚úÖ (–Ω–æ—Ä–º–∞)'}`);
    console.log(`   –ú–µ—Ç–æ–¥–æ–≤: ${methods} ${methods > 20 ? '‚ùå' : methods > 10 ? '‚ö†Ô∏è' : '‚úÖ'}`);
    console.log(`   HTML –±–ª–æ–∫–æ–≤: ${htmlLines} ${htmlLines > 0 ? '‚ùå (–Ω—É–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏)' : '‚úÖ (—á–∏—Å—Ç–æ)'}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  const expectedModules = [
    'src/utils/Logger.ts',
    'src/dashboard/DashboardService.ts',
    'src/dashboard/templates/DashboardTemplates.ts',
    'src/server/ExpressServer.ts',
    'src/server/routes/adminRoutes.ts',
    'src/server/routes/webhookRoutes.ts',
    'src/handlers/CommandHandlers.ts',
    'src/keyboards/KeyboardManager.ts',
    'src/scheduling/ReminderScheduler.ts'
  ];

  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π:');
  let completedModules = 0;
  
  expectedModules.forEach(module => {
    const exists = fs.existsSync(module);
    console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${module}`);
    if (exists) completedModules++;
  });

  // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const progress = Math.round((completedModules / expectedModules.length) * 100);
  console.log(`\nüìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress}%`);
  console.log(`${'‚ñì'.repeat(Math.floor(progress / 10))}${'‚ñë'.repeat(10 - Math.floor(progress / 10))}`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  if (progress < 20) {
    console.log('   1. –°–æ–∑–¥–∞–π—Ç–µ Logger –∏ –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–º–µ–Ω—è—Ç—å console.log');
    console.log('   2. –í—ã–Ω–µ—Å–∏—Ç–µ HTML —à–∞–±–ª–æ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã');
  } else if (progress < 50) {
    console.log('   1. –í—ã–¥–µ–ª–∏—Ç–µ ExpressServer –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞');
    console.log('   2. –°–æ–∑–¥–∞–π—Ç–µ CommandHandlers –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥');
  } else if (progress < 80) {
    console.log('   1. –í—ã–Ω–µ—Å–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ ReminderScheduler');
    console.log('   2. –°–æ–∑–¥–∞–π—Ç–µ KeyboardManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞–º–∏');
  } else {
    console.log('   üéâ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('   –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:');
  console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev');
  console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: /start –∫–æ–º–∞–Ω–¥—É –≤ –±–æ—Ç–µ');
  console.log('   –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000/dashboard');
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
function validateStep(stepName) {
  console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–≥–∞: ${stepName}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é TypeScript
    require('child_process').execSync('npx tsc --noEmit', { stdio: 'pipe' });
    console.log('‚úÖ TypeScript –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫');
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∏ TypeScript:', error.stdout?.toString());
    return false;
  }

  console.log('‚úÖ –®–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  return true;
}

// –ï—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const command = process.argv[2];
  
  if (command === 'validate') {
    const stepName = process.argv[3] || '—Ç–µ–∫—É—â–∏–π —à–∞–≥';
    validateStep(stepName);
  } else {
    checkRefactoringProgress();
  }
}

module.exports = { checkRefactoringProgress, validateStep };