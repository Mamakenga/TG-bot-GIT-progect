import { Database } from '../../src/database';
import { getDayContent } from '../../src/course-logic';

// Mock –¥–ª—è –±–æ—Ç–∞
const mockBot = {
  sendMessage: jest.fn().mockResolvedValue({}),
};

// –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
class ReminderSystemTest {
  constructor(private bot: any, private database: Database) {}

  async sendMorningMessages(): Promise<void> {
    const activeUsers = await this.database.getActiveUsers();
    
    for (const user of activeUsers) {
      if (user.course_completed || (user.current_day || 1) > 7) {
        continue;
      }

      const currentDay = user.current_day || 1;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
      const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'morning');
      if (alreadySent) {
        continue;
      }

      const dayContent = getDayContent(currentDay);
      if (!dayContent) continue;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.sendMessage(user.telegram_id, dayContent.morningMessage);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      await this.database.logReminderSent(user.id, currentDay, 'morning');
    }
  }

  async sendExerciseMessages(): Promise<void> {
    const activeUsers = await this.database.getActiveUsers();
    
    for (const user of activeUsers) {
      if (user.course_completed || (user.current_day || 1) > 7) continue;

      const currentDay = user.current_day || 1;
      
      const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'exercise');
      if (alreadySent) continue;

      const dayContent = getDayContent(currentDay);
      if (!dayContent) continue;

      await this.bot.sendMessage(user.telegram_id, dayContent.exerciseMessage, {
        reply_markup: {
          inline_keyboard: [[
            { text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', callback_data: `day_${currentDay}_exercise_ready` },
            { text: '‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å', callback_data: `day_${currentDay}_exercise_help` },
            { text: '‚è∞ –°–¥–µ–ª–∞—é –ø–æ–∑–∂–µ', callback_data: `day_${currentDay}_exercise_later` }
          ]]
        }
      });

      await this.database.logReminderSent(user.id, currentDay, 'exercise');
    }
  }

  async sendPhraseMessages(): Promise<void> {
    const activeUsers = await this.database.getActiveUsers();
    
    for (const user of activeUsers) {
      if (user.course_completed || (user.current_day || 1) > 7) continue;

      const currentDay = user.current_day || 1;
      
      const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'phrase');
      if (alreadySent) continue;

      const dayContent = getDayContent(currentDay);
      if (!dayContent) continue;

      await this.bot.sendMessage(user.telegram_id, dayContent.phraseOfDay, {
        reply_markup: {
          inline_keyboard: [[
            { text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è', callback_data: `day_${currentDay}_phrase_resonates` },
            { text: 'ü§î –ó–≤—É—á–∏—Ç —Å—Ç—Ä–∞–Ω–Ω–æ', callback_data: `day_${currentDay}_phrase_strange` },
            { text: 'üòî –°–ª–æ–∂–Ω–æ –ø–æ–≤–µ—Ä–∏—Ç—å', callback_data: `day_${currentDay}_phrase_difficult` }
          ]]
        }
      });

      await this.database.logReminderSent(user.id, currentDay, 'phrase');
    }
  }

  async sendEveningMessages(): Promise<void> {
    const activeUsers = await this.database.getActiveUsers();
    
    for (const user of activeUsers) {
      if (user.course_completed || (user.current_day || 1) > 7) continue;

      const currentDay = user.current_day || 1;
      
      const alreadySent = await this.database.wasReminderSentToday(user.id, currentDay, 'evening');
      if (alreadySent) continue;

      const dayContent = getDayContent(currentDay);
      if (!dayContent) continue;

      await this.bot.sendMessage(user.telegram_id, dayContent.eveningMessage, {
        reply_markup: dayContent.options ? {
          inline_keyboard: dayContent.options.map((option, index) => [{
            text: option.text,
            callback_data: `day_${currentDay}_evening_${index}`
          }])
        } : undefined
      });

      await this.database.logReminderSent(user.id, currentDay, 'evening');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
      const shouldAdvance = await this.database.shouldAdvanceUserDay(user.id, currentDay);
      if (shouldAdvance && currentDay < 7) {
        await this.database.updateUserDay(user.telegram_id, currentDay + 1);
      }
    }
  }
}

describe('Reminder System Integration Tests', () => {
  let database: Database;
  let reminderSystem: ReminderSystemTest;
  let testUserIds: number[] = [];

  beforeAll(async () => {
    database = new Database();
    await database.init();
    reminderSystem = new ReminderSystemTest(mockBot, database);
  });

  afterAll(async () => {
    // –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userId of testUserIds) {
      await database.pool.query('DELETE FROM users WHERE telegram_id = $1', [userId]);
    }
    await database.close();
  });

  beforeEach(async () => {
    jest.clearAllMocks();
    // –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const userId of testUserIds) {
      const user = await database.getUser(userId);
      if (user) {
        await database.pool.query('DELETE FROM reminder_log WHERE user_id = $1', [user.id]);
      }
    }
  });

  describe('Morning Messages', () => {
    it('should send morning message to active user', async () => {
      const user = await database.createUser(999999001, 'Test User 1');
      testUserIds.push(999999001);

      await reminderSystem.sendMorningMessages();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        999999001,
        expect.stringContaining('–¥–µ–Ω—å')
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      const wasSent = await database.wasReminderSentToday(user.id, 1, 'morning');
      expect(wasSent).toBe(true);
    });

    it('should not send duplicate morning messages', async () => {
      const user = await database.createUser(999999002, 'Test User 2');
      testUserIds.push(999999002);

      // –ü–µ—Ä–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
      await reminderSystem.sendMorningMessages();
      expect(mockBot.sendMessage).toHaveBeenCalledTimes(1);

      jest.clearAllMocks();

      // –í—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏
      await reminderSystem.sendMorningMessages();
      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });

    it('should skip completed course users', async () => {
      const user = await database.createUser(999999003, 'Completed User');
      testUserIds.push(999999003);
      await database.markCourseCompleted(999999003);

      await reminderSystem.sendMorningMessages();

      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });

    it('should skip paused users', async () => {
      const user = await database.createUser(999999004, 'Paused User');
      testUserIds.push(999999004);
      await database.pauseUser(999999004);

      await reminderSystem.sendMorningMessages();

      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });
  });

  describe('Exercise Messages', () => {
    it('should send exercise with interactive buttons', async () => {
      const user = await database.createUser(999999005, 'Exercise User');
      testUserIds.push(999999005);

      await reminderSystem.sendExerciseMessages();

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        999999005,
        expect.any(String),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({
                  text: '‚úÖ –ì–æ—Ç–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å',
                  callback_data: 'day_1_exercise_ready'
                })
              ])
            ])
          })
        })
      );
    });

    it('should not send duplicate exercise messages', async () => {
      const user = await database.createUser(999999006, 'Exercise User 2');
      testUserIds.push(999999006);

      await reminderSystem.sendExerciseMessages();
      jest.clearAllMocks();
      
      await reminderSystem.sendExerciseMessages();
      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });
  });

  describe('Phrase Messages', () => {
    it('should send phrase with feedback buttons', async () => {
      const user = await database.createUser(999999007, 'Phrase User');
      testUserIds.push(999999007);

      await reminderSystem.sendPhraseMessages();

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        999999007,
        expect.any(String),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({
                  text: 'üíô –û—Ç–∫–ª–∏–∫–∞–µ—Ç—Å—è',
                  callback_data: 'day_1_phrase_resonates'
                })
              ])
            ])
          })
        })
      );
    });
  });

  describe('Evening Messages and Day Advancement', () => {
    it('should send evening message and advance day when all reminders sent', async () => {
      const user = await database.createUser(999999008, 'Evening User');
      testUserIds.push(999999008);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
      await reminderSystem.sendMorningMessages();
      await reminderSystem.sendExerciseMessages();
      await reminderSystem.sendPhraseMessages();
      await reminderSystem.sendEveningMessages();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ–Ω—å 2
      const updatedUser = await database.getUser(999999008);
      expect(updatedUser!.current_day).toBe(2);
    });

    it('should not advance day if not all reminders sent', async () => {
      const user = await database.createUser(999999009, 'Partial User');
      testUserIds.push(999999009);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await reminderSystem.sendMorningMessages();
      await reminderSystem.sendEveningMessages();

      // –î–µ–Ω—å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
      const updatedUser = await database.getUser(999999009);
      expect(updatedUser!.current_day).toBe(1);
    });

    it('should send evening message with options for reflection days', async () => {
      const user = await database.createUser(999999010, 'Reflection User');
      testUserIds.push(999999010);
      await database.updateUserDay(999999010, 3); // –î–µ–Ω—å —Å –æ–ø—Ü–∏—è–º–∏

      await reminderSystem.sendEveningMessages();

      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        999999010,
        expect.any(String),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      );
    });
  });

  describe('Multi-User Scenarios', () => {
    it('should handle multiple users at different days', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–Ω—è—Ö
      const user1 = await database.createUser(999999011, 'User Day 1');
      const user2 = await database.createUser(999999012, 'User Day 3');
      testUserIds.push(999999011, 999999012);
      
      await database.updateUserDay(999999012, 3);

      await reminderSystem.sendMorningMessages();

      // –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      expect(mockBot.sendMessage).toHaveBeenCalledTimes(2);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–Ω–µ–π
      const calls = mockBot.sendMessage.mock.calls;
      expect(calls.some(call => call[0] === 999999011)).toBe(true);
      expect(calls.some(call => call[0] === 999999012)).toBe(true);
    });

    it('should handle mixed user states', async () => {
      // –ê–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const activeUser = await database.createUser(999999013, 'Active');
      // –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const pausedUser = await database.createUser(999999014, 'Paused');
      // –ó–∞–≤–µ—Ä—à–∏–≤—à–∏–π –∫—É—Ä—Å
      const completedUser = await database.createUser(999999015, 'Completed');
      
      testUserIds.push(999999013, 999999014, 999999015);
      
      await database.pauseUser(999999014);
      await database.markCourseCompleted(999999015);

      await reminderSystem.sendMorningMessages();

      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      expect(mockBot.sendMessage).toHaveBeenCalledTimes(1);
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        999999013,
        expect.any(String)
      );
    });
  });

  describe('Edge Cases', () => {
    it('should handle users beyond day 7', async () => {
      const user = await database.createUser(999999016, 'Beyond Course');
      testUserIds.push(999999016);
      await database.updateUserDay(999999016, 8);

      await reminderSystem.sendMorningMessages();

      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });

    it('should handle database errors gracefully', async () => {
      // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const originalGetActiveUsers = database.getActiveUsers;
      database.getActiveUsers = jest.fn().mockRejectedValue(new Error('DB Error'));

      await expect(reminderSystem.sendMorningMessages()).resolves.not.toThrow();

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥
      database.getActiveUsers = originalGetActiveUsers;
    });

    it('should handle missing course content gracefully', async () => {
      const user = await database.createUser(999999017, 'Invalid Day');
      testUserIds.push(999999017);
      await database.updateUserDay(999999017, 999); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å

      await reminderSystem.sendMorningMessages();

      expect(mockBot.sendMessage).not.toHaveBeenCalled();
    });
  });
});