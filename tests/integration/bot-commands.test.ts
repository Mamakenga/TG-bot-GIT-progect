import { CommandHandlers } from '../../src/handlers/CommandHandlers';
import { Database } from '../../src/database';
import { KeyboardManager } from '../../src/keyboards/KeyboardManager';

// Mock TelegramBot
const mockBot = {
  sendMessage: jest.fn().mockResolvedValue({}),
  answerCallbackQuery: jest.fn().mockResolvedValue({}),
};

// Mock Message objects
const createMockMessage = (text: string, telegramId: number = 999999999) => ({
  chat: { id: 123456789 },
  from: { id: telegramId, first_name: 'Test User' },
  text,
  message_id: 1,
  date: Date.now() / 1000,
});

const createMockCallbackQuery = (data: string, telegramId: number = 999999999) => ({
  id: 'callback_123',
  from: { id: telegramId, first_name: 'Test User' },
  message: {
    chat: { id: 123456789 },
    message_id: 1,
    date: Date.now() / 1000,
  },
  data,
});

describe('Bot Commands Integration Tests', () => {
  let database: Database;
  let commandHandlers: CommandHandlers;
  let keyboardManager: KeyboardManager;

  beforeAll(async () => {
    database = new Database();
    await database.init();
    keyboardManager = new KeyboardManager();
    commandHandlers = new CommandHandlers(mockBot as any, database, keyboardManager);
  });

  afterAll(async () => {
    await database.close();
  });

  beforeEach(async () => {
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await database.pool.query('DELETE FROM users WHERE telegram_id = $1', [999999999]);
    jest.clearAllMocks();
  });

  describe('/start Command Flow', () => {
    it('should handle new user start command', async () => {
      const message = createMockMessage('/start');
      
      await commandHandlers.handleStart(message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const user = await database.getUser(999999999);
      expect(user).toBeDefined();
      expect(user!.telegram_id).toBe(999999999);
      expect(user!.current_day).toBe(1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ü—Ä–∏–≤–µ—Ç'),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      );
    });

    it('should handle returning user start command', async () => {
      // –°–æ–∑–¥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await database.createUser(999999999, 'Test User');
      await database.updateUserDay(999999999, 3);
      
      const message = createMockMessage('/start');
      await commandHandlers.handleStart(message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–µ–≥–æ—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º'),
        expect.any(Object)
      );
    });

    it('should handle completed course user', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –∫—É—Ä—Å–æ–º
      await database.createUser(999999999, 'Test User');
      await database.markCourseCompleted(999999999);
      
      const message = createMockMessage('/start');
      await commandHandlers.handleStart(message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ –∫—É—Ä—Å
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–∑–∞–≤–µ—Ä—à–∏–ª–∞ 7-–¥–Ω–µ–≤–Ω—ã–π –∫—É—Ä—Å'),
        expect.any(Object)
      );
    });
  });

  describe('Callback Query Handling', () => {
    beforeEach(async () => {
      await database.createUser(999999999, 'Test User');
    });

    it('should handle start_yes callback', async () => {
      const callbackQuery = createMockCallbackQuery('start_yes');
      
      await commandHandlers.handleCallback(callbackQuery);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await database.getUser(999999999);
      expect(user!.current_day).toBe(1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ –∫—É—Ä—Å'),
        expect.any(Object)
      );
      
      expect(mockBot.answerCallbackQuery).toHaveBeenCalledWith('callback_123');
    });

    it('should handle more_info callback', async () => {
      const callbackQuery = createMockCallbackQuery('more_info');
      
      await commandHandlers.handleCallback(callbackQuery);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 7 –¥–Ω–µ–π'),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      );
    });

    it('should handle later callback', async () => {
      const callbackQuery = createMockCallbackQuery('later');
      
      await commandHandlers.handleCallback(callbackQuery);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ü–æ–Ω–∏–º–∞—é'),
        expect.any(Object)
      );
    });

    it('should handle exercise help callback', async () => {
      const callbackQuery = createMockCallbackQuery('day_1_exercise_help');
      
      await commandHandlers.handleCallback(callbackQuery);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ü–æ–º–æ—â—å —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ–º')
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('@amalinovskaya_psy'),
        expect.any(Object)
      );
    });

    it('should save user responses from day callbacks', async () => {
      const callbackQuery = createMockCallbackQuery('day_1_evening_0');
      
      await commandHandlers.handleCallback(callbackQuery);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –ë–î
      const user = await database.getUser(999999999);
      const responses = await database.pool.query(
        'SELECT * FROM responses WHERE user_id = $1',
        [user!.id]
      );
      
      expect(responses.rows).toHaveLength(1);
      expect(responses.rows[0].response_text).toBe('day_1_evening_0');
      expect(responses.rows[0].response_type).toBe('button_choice');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringMatching(/–°–ø–∞—Å–∏–±–æ|–ë–ª–∞–≥–æ–¥–∞—Ä—é|–≤–∞–∂–Ω—ã|–ø–æ–¥–µ–ª–∏–ª–∞—Å—å/),
        expect.any(Object)
      );
    });
  });

  describe('/help Command', () => {
    it('should provide help information', async () => {
      const message = createMockMessage('/help');
      
      await commandHandlers.handleHelp(message);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É'),
        expect.any(Object)
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const sentMessage = mockBot.sendMessage.mock.calls[0][1];
      expect(sentMessage).toContain('help@harmony4soul.com');
      expect(sentMessage).toContain('@amalinovskaya_psy');
    });
  });

  describe('/progress Command', () => {
    it('should show progress for new user', async () => {
      await database.createUser(999999999, 'Test User');
      const message = createMockMessage('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
      
      await commandHandlers.handleProgress(message);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–î–µ–Ω—å: 1 –∏–∑ 7'),
        expect.any(Object)
      );
    });

    it('should show progress for completed user', async () => {
      await database.createUser(999999999, 'Test User');
      await database.markCourseCompleted(999999999);
      
      const message = createMockMessage('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
      await commandHandlers.handleProgress(message);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ö—É—Ä—Å –∑–∞–≤–µ—Ä—à–µ–Ω'),
        expect.any(Object)
      );
    });

    it('should show paused status', async () => {
      await database.createUser(999999999, 'Test User');
      await database.pauseUser(999999999);
      
      const message = createMockMessage('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
      await commandHandlers.handleProgress(message);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–ù–∞ –ø–∞—É–∑–µ'),
        expect.any(Object)
      );
    });

    it('should handle non-existing user', async () => {
      const message = createMockMessage('üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å');
      
      await commandHandlers.handleProgress(message);
      
      expect(mockBot.sendMessage).toHaveBeenCalledWith(
        123456789,
        expect.stringContaining('–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞'),
        expect.any(Object)
      );
    });
  });

  describe('Error Handling', () => {
    it('should handle database errors gracefully', async () => {
      // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ë–î
      const originalGetUser = database.getUser;
      database.getUser = jest.fn().mockRejectedValue(new Error('DB Error'));
      
      const message = createMockMessage('/start');
      
      // –ö–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
      await expect(commandHandlers.handleStart(message)).resolves.not.toThrow();
      
      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥
      database.getUser = originalGetUser;
    });

    it('should handle missing user data in callbacks', async () => {
      const callbackQuery = createMockCallbackQuery('start_yes', 888888888); // –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      
      await expect(commandHandlers.handleCallback(callbackQuery)).resolves.not.toThrow();
      expect(mockBot.answerCallbackQuery).toHaveBeenCalled();
    });
  });
});